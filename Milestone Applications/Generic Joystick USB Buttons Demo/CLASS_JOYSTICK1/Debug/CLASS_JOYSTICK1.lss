
CLASS_JOYSTICK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  00800110  00800110  0000142c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000728  00000000  00000000  00002249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000acd3  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d9f  00000000  00000000  0000d644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001607c  00000000  00000000  000103e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001290  00000000  00000000  00026460  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00016189  00000000  00000000  000276f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000075fc  00000000  00000000  0003d879  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001028  00000000  00000000  00044e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a255  00000000  00000000  00045e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8e c0       	rjmp	.+284    	; 0x11e <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c7       	rjmp	.+3764   	; 0xee2 <__vector_11>
      2e:	00 00       	nop
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__vector_23>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
	...

00000074 <ProductString>:
      74:	26 03 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00     &.J.o.y.s.t.i.c.
      84:	6b 00 00 00                                         k...

00000088 <ManufacturerString>:
      88:	18 03 46 00 72 00 61 00 6e 00 63 00 69 00 73 00     ..F.r.a.n.c.i.s.
      98:	20 00 50 00 61 00 70 00 69 00 6e 00 65 00 61 00      .P.a.p.i.n.e.a.
      a8:	75 00 00 00                                         u...

000000ac <LanguageString>:
      ac:	04 03 09 04                                         ....

000000b0 <ConfigurationDescriptor>:
      b0:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      c0:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
      d0:	00 05                                               ..

000000d2 <DeviceDescriptor>:
      d2:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
      e2:	00 01                                               ..

000000e4 <JoystickReport>:
      e4:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
      f4:	16 18 fc 26 e8 03 36 ff ff 46 01 00 95 03 75 10     ...&..6..F....u.
     104:	81 02 c0 05 09 19 01 29 02 15 00 25 01 75 01 95     .......)...%.u..
     114:	02 81 02 75 06 95 01 81 01 c0                       ...u......

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d2 e0       	ldi	r29, 0x02	; 2
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	e8 e8       	ldi	r30, 0x88	; 136
     132:	f3 e1       	ldi	r31, 0x13	; 19
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a0 31       	cpi	r26, 0x10	; 16
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	a0 e1       	ldi	r26, 0x10	; 16
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a2 3b       	cpi	r26, 0xB2	; 178
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	79 d0       	rcall	.+242    	; 0x244 <main>
     152:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     158:	29 2f       	mov	r18, r25
     15a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     15c:	23 30       	cpi	r18, 0x03	; 3
     15e:	31 05       	cpc	r19, r1
     160:	c9 f0       	breq	.+50     	; 0x194 <CALLBACK_USB_GetDescriptor+0x3c>
     162:	44 f4       	brge	.+16     	; 0x174 <CALLBACK_USB_GetDescriptor+0x1c>
     164:	21 30       	cpi	r18, 0x01	; 1
     166:	31 05       	cpc	r19, r1
     168:	09 f4       	brne	.+2      	; 0x16c <CALLBACK_USB_GetDescriptor+0x14>
     16a:	39 c0       	rjmp	.+114    	; 0x1de <CALLBACK_USB_GetDescriptor+0x86>
     16c:	22 30       	cpi	r18, 0x02	; 2
     16e:	31 05       	cpc	r19, r1
     170:	39 f4       	brne	.+14     	; 0x180 <CALLBACK_USB_GetDescriptor+0x28>
     172:	0b c0       	rjmp	.+22     	; 0x18a <CALLBACK_USB_GetDescriptor+0x32>
     174:	21 32       	cpi	r18, 0x21	; 33
     176:	31 05       	cpc	r19, r1
     178:	41 f1       	breq	.+80     	; 0x1ca <CALLBACK_USB_GetDescriptor+0x72>
     17a:	22 32       	cpi	r18, 0x22	; 34
     17c:	31 05       	cpc	r19, r1
     17e:	51 f1       	breq	.+84     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	33 c0       	rjmp	.+102    	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     18a:	22 e2       	ldi	r18, 0x22	; 34
     18c:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     18e:	80 eb       	ldi	r24, 0xB0	; 176
     190:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     192:	2e c0       	rjmp	.+92     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     194:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	91 05       	cpc	r25, r1
     19a:	59 f0       	breq	.+22     	; 0x1b2 <CALLBACK_USB_GetDescriptor+0x5a>
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	91 05       	cpc	r25, r1
     1a0:	71 f0       	breq	.+28     	; 0x1be <CALLBACK_USB_GetDescriptor+0x66>
     1a2:	89 2b       	or	r24, r25
     1a4:	09 f5       	brne	.+66     	; 0x1e8 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1a6:	ec ea       	ldi	r30, 0xAC	; 172
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	24 91       	lpm	r18, Z
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1ae:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1b0:	1f c0       	rjmp	.+62     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1b2:	e8 e8       	ldi	r30, 0x88	; 136
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	24 91       	lpm	r18, Z
     1b8:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1ba:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1bc:	19 c0       	rjmp	.+50     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1be:	e4 e7       	ldi	r30, 0x74	; 116
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	24 91       	lpm	r18, Z
     1c4:	30 e0       	ldi	r19, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1c6:	cf 01       	movw	r24, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     1ca:	29 e0       	ldi	r18, 0x09	; 9
     1cc:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     1ce:	82 ec       	ldi	r24, 0xC2	; 194
     1d0:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     1d4:	2a e3       	ldi	r18, 0x3A	; 58
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     1d8:	84 ee       	ldi	r24, 0xE4	; 228
     1da:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
     1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1de:	22 e1       	ldi	r18, 0x12	; 18
     1e0:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1e2:	82 ed       	ldi	r24, 0xD2	; 210
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     1f0:	fa 01       	movw	r30, r20
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
	return Size;
}
     1f6:	82 2f       	mov	r24, r18
     1f8:	93 2f       	mov	r25, r19
     1fa:	08 95       	ret

000001fc <SetupHardware>:
    }
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     200:	84 b7       	in	r24, 0x34	; 52
     202:	87 7f       	andi	r24, 0xF7	; 247
     204:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     206:	28 e1       	ldi	r18, 0x18	; 24
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	20 93 60 00 	sts	0x0060, r18
     210:	10 92 60 00 	sts	0x0060, r1
     214:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     216:	8f ec       	ldi	r24, 0xCF	; 207
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	90 93 cd 00 	sts	0x00CD, r25
     21e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     22e:	c9 ec       	ldi	r28, 0xC9	; 201
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	28 83       	st	Y, r18

				DDRD  |= (1 << 3);
     234:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     236:	5a 9a       	sbi	0x0b, 2	; 11

    /* Hardware Initialization */
    Serial_Init(9600, true);
    LEDs_Init();
    USB_Init();
     238:	45 d6       	rcall	.+3210   	; 0xec4 <USB_Init>

    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     23a:	88 e9       	ldi	r24, 0x98	; 152
     23c:	88 83       	st	Y, r24
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     244:	db df       	rcall	.-74     	; 0x1fc <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     246:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     248:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     24a:	80 e2       	ldi	r24, 0x20	; 32
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	90 93 a1 01 	sts	0x01A1, r25
     252:	80 93 a0 01 	sts	0x01A0, r24
				Buffer->Out = Buffer->Buffer;
     256:	90 93 a3 01 	sts	0x01A3, r25
     25a:	80 93 a2 01 	sts	0x01A2, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     25e:	2f bf       	out	0x3f, r18	; 63

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

    sei();
     260:	78 94       	sei

    for (;;) {
	    HID_Device_USBTask(&Joystick_HID_Interface);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	45 d2       	rcall	.+1162   	; 0x6f2 <HID_Device_USBTask>
	    USB_USBTask();
     268:	0e 94 8a 09 	call	0x1314	; 0x1314 <USB_USBTask>

	    /* Turn off the Tx LED when the tick count reaches zero */
	    if (led1_ticks) {
     26c:	80 91 10 01 	lds	r24, 0x0110
     270:	90 91 11 01 	lds	r25, 0x0111
     274:	89 2b       	or	r24, r25
     276:	a9 f3       	breq	.-22     	; 0x262 <main+0x1e>
		    led1_ticks--;
     278:	80 91 10 01 	lds	r24, 0x0110
     27c:	90 91 11 01 	lds	r25, 0x0111
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	90 93 11 01 	sts	0x0111, r25
     286:	80 93 10 01 	sts	0x0110, r24
		    if (led1_ticks == 0) {
     28a:	80 91 10 01 	lds	r24, 0x0110
     28e:	90 91 11 01 	lds	r25, 0x0111
     292:	e7 cf       	rjmp	.-50     	; 0x262 <main+0x1e>

00000294 <EVENT_USB_Device_Connect>:
    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     294:	08 95       	ret

00000296 <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     296:	08 95       	ret

00000298 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
   HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	14 d2       	rcall	.+1064   	; 0x6c6 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     29e:	e2 ee       	ldi	r30, 0xE2	; 226
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	84 60       	ori	r24, 0x04	; 4
     2a6:	80 83       	st	Z, r24
     2a8:	08 95       	ret

000002aa <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	b6 c0       	rjmp	.+364    	; 0x41c <HID_Device_ProcessControlRequest>

000002b0 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2b0:	80 91 0e 01 	lds	r24, 0x010E
     2b4:	90 91 0f 01 	lds	r25, 0x010F
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	29 f0       	breq	.+10     	; 0x2c6 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	90 93 0f 01 	sts	0x010F, r25
     2c2:	80 93 0e 01 	sts	0x010E, r24
     2c6:	08 95       	ret

000002c8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2d8:	f8 94       	cli
			{
				Count = Buffer->Count;
     2da:	80 91 a4 01 	lds	r24, 0x01A4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2de:	9f bf       	out	0x3f, r25	; 63
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;

    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport) + 1)) {
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	08 f4       	brcc	.+2      	; 0x2e6 <CALLBACK_HID_Device_CreateHIDReport+0x1e>
     2e4:	44 c0       	rjmp	.+136    	; 0x36e <__stack+0x6f>
     2e6:	c2 e1       	ldi	r28, 0x12	; 18
     2e8:	d1 e0       	ldi	r29, 0x01	; 1
 *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be sent)
 *
 *  \return Boolean \c true to force the sending of the report, \c false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
     2ea:	49 e1       	ldi	r20, 0x19	; 25
     2ec:	51 e0       	ldi	r21, 0x01	; 1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     2ee:	a2 ea       	ldi	r26, 0xA2	; 162
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     2f2:	0f 2e       	mov	r0, r31
     2f4:	f0 e2       	ldi	r31, 0x20	; 32
     2f6:	cf 2e       	mov	r12, r31
     2f8:	f1 e0       	ldi	r31, 0x01	; 1
     2fa:	df 2e       	mov	r13, r31
     2fc:	f0 2d       	mov	r31, r0

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->Count--;
     2fe:	84 ea       	ldi	r24, 0xA4	; 164
     300:	91 e0       	ldi	r25, 0x01	; 1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     302:	ed 91       	ld	r30, X+
     304:	fc 91       	ld	r31, X
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	f1 90       	ld	r15, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     30a:	11 96       	adiw	r26, 0x01	; 1
     30c:	fc 93       	st	X, r31
     30e:	ee 93       	st	-X, r30
     310:	e0 5a       	subi	r30, 0xA0	; 160
     312:	f1 40       	sbci	r31, 0x01	; 1
     314:	19 f4       	brne	.+6      	; 0x31c <__stack+0x1d>
			  Buffer->Out = Buffer->Buffer;
     316:	11 96       	adiw	r26, 0x01	; 1
     318:	dc 92       	st	X, r13
     31a:	ce 92       	st	-X, r12

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     31c:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31e:	f8 94       	cli
			{
				Buffer->Count--;
     320:	fc 01       	movw	r30, r24
     322:	70 81       	ld	r23, Z
     324:	71 50       	subi	r23, 0x01	; 1
     326:	70 83       	st	Z, r23
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     328:	6f bf       	out	0x3f, r22	; 63
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport) + 1)) {
	    uint8_t ind;
	    for (ind=0; ind<sizeof(joyReport); ind++) {
		    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
     32a:	f9 92       	st	Y+, r15

    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    if (BufferCount >= (sizeof(joyReport) + 1)) {
	    uint8_t ind;
	    for (ind=0; ind<sizeof(joyReport); ind++) {
     32c:	c4 17       	cp	r28, r20
     32e:	d5 07       	cpc	r29, r21
     330:	41 f7       	brne	.-48     	; 0x302 <__stack+0x3>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     332:	e2 ea       	ldi	r30, 0xA2	; 162
     334:	f1 e0       	ldi	r31, 0x01	; 1
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	91 83       	std	Z+1, r25	; 0x01
     33e:	80 83       	st	Z, r24
     340:	80 5a       	subi	r24, 0xA0	; 160
     342:	91 40       	sbci	r25, 0x01	; 1
     344:	31 f4       	brne	.+12     	; 0x352 <__stack+0x53>
			  Buffer->Out = Buffer->Buffer;
     346:	80 e2       	ldi	r24, 0x20	; 32
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	90 93 a3 01 	sts	0x01A3, r25
     34e:	80 93 a2 01 	sts	0x01A2, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     352:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     354:	f8 94       	cli
			{
				Buffer->Count--;
     356:	e4 ea       	ldi	r30, 0xA4	; 164
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	90 81       	ld	r25, Z
     35c:	91 50       	subi	r25, 0x01	; 1
     35e:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     360:	8f bf       	out	0x3f, r24	; 63

	    /* Remove spacer */
	    RingBuffer_Remove(&USARTtoUSB_Buffer);

	    LEDs_TurnOnLEDs(LEDS_LED1);
	    led1_ticks = LED_ON_TICKS;
     362:	80 ed       	ldi	r24, 0xD0	; 208
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	90 93 11 01 	sts	0x0111, r25
     36a:	80 93 10 01 	sts	0x0110, r24
    }

    *reportp = joyReport;
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	f1 e0       	ldi	r31, 0x01	; 1
     374:	d9 01       	movw	r26, r18
     376:	01 90       	ld	r0, Z+
     378:	0d 92       	st	X+, r0
     37a:	8a 95       	dec	r24
     37c:	e1 f7       	brne	.-8      	; 0x376 <__stack+0x77>

    *ReportSize = sizeof(USB_JoystickReport_Data_t);
     37e:	87 e0       	ldi	r24, 0x07	; 7
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	f8 01       	movw	r30, r16
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
    return false;
}
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     39a:	08 95       	ret

0000039c <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
     3b4:	90 91 ce 00 	lds	r25, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured) &&
     3b8:	80 91 a9 01 	lds	r24, 0x01A9
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	11 f5       	brne	.+68     	; 0x404 <__vector_23+0x68>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3c0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c2:	f8 94       	cli
			{
				Count = Buffer->Count;
     3c4:	80 91 a4 01 	lds	r24, 0x01A4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3c8:	2f bf       	out	0x3f, r18	; 63
     3ca:	80 38       	cpi	r24, 0x80	; 128
     3cc:	d9 f0       	breq	.+54     	; 0x404 <__vector_23+0x68>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     3ce:	e0 ea       	ldi	r30, 0xA0	; 160
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	a0 81       	ld	r26, Z
     3d4:	b1 81       	ldd	r27, Z+1	; 0x01
     3d6:	9c 93       	st	X, r25
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	91 83       	std	Z+1, r25	; 0x01
     3e0:	80 83       	st	Z, r24
     3e2:	8e 17       	cp	r24, r30
     3e4:	9f 07       	cpc	r25, r31
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <__vector_23+0x58>
			  Buffer->In = Buffer->Buffer;
     3e8:	80 e2       	ldi	r24, 0x20	; 32
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	90 93 a1 01 	sts	0x01A1, r25
     3f0:	80 93 a0 01 	sts	0x01A0, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3f4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f6:	f8 94       	cli
			{
				Buffer->Count++;
     3f8:	e4 ea       	ldi	r30, 0xA4	; 164
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	90 81       	ld	r25, Z
     3fe:	9f 5f       	subi	r25, 0xFF	; 255
     400:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     402:	8f bf       	out	0x3f, r24	; 63
	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
     404:	ff 91       	pop	r31
     406:	ef 91       	pop	r30
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     41c:	3f 92       	push	r3
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <HID_Device_ProcessControlRequest+0x24>
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     448:	ed b6       	in	r14, 0x3d	; 61
     44a:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     44c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     450:	83 ff       	sbrs	r24, 3
     452:	1f c1       	rjmp	.+574    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     454:	f6 01       	movw	r30, r12
     456:	80 81       	ld	r24, Z
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	20 91 ae 01 	lds	r18, 0x01AE
     45e:	30 91 af 01 	lds	r19, 0x01AF
     462:	28 17       	cp	r18, r24
     464:	39 07       	cpc	r19, r25
     466:	09 f0       	breq	.+2      	; 0x46a <HID_Device_ProcessControlRequest+0x4e>
     468:	14 c1       	rjmp	.+552    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
	  return;

	switch (USB_ControlRequest.bRequest)
     46a:	80 91 ab 01 	lds	r24, 0x01AB
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	09 f4       	brne	.+2      	; 0x474 <HID_Device_ProcessControlRequest+0x58>
     472:	ac c0       	rjmp	.+344    	; 0x5cc <HID_Device_ProcessControlRequest+0x1b0>
     474:	30 f4       	brcc	.+12     	; 0x482 <HID_Device_ProcessControlRequest+0x66>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	71 f0       	breq	.+28     	; 0x496 <HID_Device_ProcessControlRequest+0x7a>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	09 f0       	breq	.+2      	; 0x480 <HID_Device_ProcessControlRequest+0x64>
     47e:	09 c1       	rjmp	.+530    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     480:	ed c0       	rjmp	.+474    	; 0x65c <HID_Device_ProcessControlRequest+0x240>
     482:	8a 30       	cpi	r24, 0x0A	; 10
     484:	09 f4       	brne	.+2      	; 0x488 <HID_Device_ProcessControlRequest+0x6c>
     486:	ce c0       	rjmp	.+412    	; 0x624 <HID_Device_ProcessControlRequest+0x208>
     488:	8b 30       	cpi	r24, 0x0B	; 11
     48a:	09 f4       	brne	.+2      	; 0x48e <HID_Device_ProcessControlRequest+0x72>
     48c:	b7 c0       	rjmp	.+366    	; 0x5fc <HID_Device_ProcessControlRequest+0x1e0>
     48e:	89 30       	cpi	r24, 0x09	; 9
     490:	09 f0       	breq	.+2      	; 0x494 <HID_Device_ProcessControlRequest+0x78>
     492:	ff c0       	rjmp	.+510    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     494:	59 c0       	rjmp	.+178    	; 0x548 <HID_Device_ProcessControlRequest+0x12c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     496:	80 91 aa 01 	lds	r24, 0x01AA
     49a:	81 3a       	cpi	r24, 0xA1	; 161
     49c:	09 f0       	breq	.+2      	; 0x4a0 <HID_Device_ProcessControlRequest+0x84>
     49e:	f9 c0       	rjmp	.+498    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     4a0:	8d b6       	in	r8, 0x3d	; 61
     4a2:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     4a4:	1a 82       	std	Y+2, r1	; 0x02
     4a6:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     4a8:	ec ea       	ldi	r30, 0xAC	; 172
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	11 81       	ldd	r17, Z+1	; 0x01
     4b0:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     4b2:	f6 01       	movw	r30, r12
     4b4:	40 85       	ldd	r20, Z+8	; 0x08
     4b6:	8d b7       	in	r24, 0x3d	; 61
     4b8:	9e b7       	in	r25, 0x3e	; 62
     4ba:	84 1b       	sub	r24, r20
     4bc:	91 09       	sbc	r25, r1
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	9e bf       	out	0x3e, r25	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	8d bf       	out	0x3d, r24	; 61
     4c8:	ad b6       	in	r10, 0x3d	; 61
     4ca:	be b6       	in	r11, 0x3e	; 62
     4cc:	e1 e0       	ldi	r30, 0x01	; 1
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ae 0e       	add	r10, r30
     4d2:	bf 1e       	adc	r11, r31

				memset(ReportData, 0, sizeof(ReportData));
     4d4:	6a 2c       	mov	r6, r10
     4d6:	7b 2c       	mov	r7, r11
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8a 2d       	mov	r24, r10
     4e0:	9b 2d       	mov	r25, r11
     4e2:	49 d7       	rcall	.+3730   	; 0x1376 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     4e4:	41 2f       	mov	r20, r17
     4e6:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     4e8:	8e 01       	movw	r16, r28
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	2a 2d       	mov	r18, r10
     4f0:	3b 2d       	mov	r19, r11
     4f2:	be 01       	movw	r22, r28
     4f4:	6d 5f       	subi	r22, 0xFD	; 253
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	c6 01       	movw	r24, r12
     4fa:	e6 de       	rcall	.-564    	; 0x2c8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     4fc:	f6 01       	movw	r30, r12
     4fe:	26 81       	ldd	r18, Z+6	; 0x06
     500:	37 81       	ldd	r19, Z+7	; 0x07
     502:	21 15       	cp	r18, r1
     504:	31 05       	cpc	r19, r1
     506:	39 f0       	breq	.+14     	; 0x516 <HID_Device_ProcessControlRequest+0xfa>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     508:	40 85       	ldd	r20, Z+8	; 0x08
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	6a 2d       	mov	r22, r10
     50e:	7b 2d       	mov	r23, r11
     510:	82 2f       	mov	r24, r18
     512:	93 2f       	mov	r25, r19
     514:	27 d7       	rcall	.+3662   	; 0x1364 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     516:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     51a:	08 ee       	ldi	r16, 0xE8	; 232
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	f8 01       	movw	r30, r16
     520:	80 81       	ld	r24, Z
     522:	87 7f       	andi	r24, 0xF7	; 247
     524:	80 83       	st	Z, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     526:	69 81       	ldd	r22, Y+1	; 0x01
     528:	7a 81       	ldd	r23, Y+2	; 0x02
     52a:	86 2d       	mov	r24, r6
     52c:	97 2d       	mov	r25, r7
     52e:	12 d2       	rcall	.+1060   	; 0x954 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     530:	f8 01       	movw	r30, r16
     532:	80 81       	ld	r24, Z
     534:	8b 77       	andi	r24, 0x7B	; 123
     536:	80 83       	st	Z, r24
     538:	88 2d       	mov	r24, r8
     53a:	99 2d       	mov	r25, r9
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	9e bf       	out	0x3e, r25	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	8d bf       	out	0x3d, r24	; 61
     546:	a5 c0       	rjmp	.+330    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     548:	80 91 aa 01 	lds	r24, 0x01AA
     54c:	81 32       	cpi	r24, 0x21	; 33
     54e:	09 f0       	breq	.+2      	; 0x552 <HID_Device_ProcessControlRequest+0x136>
     550:	a0 c0       	rjmp	.+320    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     552:	5d b6       	in	r5, 0x3d	; 61
     554:	6e b6       	in	r6, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     556:	a0 90 b0 01 	lds	r10, 0x01B0
     55a:	b0 90 b1 01 	lds	r11, 0x01B1
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     55e:	ec ea       	ldi	r30, 0xAC	; 172
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	70 80       	ld	r7, Z
     564:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     566:	8d b7       	in	r24, 0x3d	; 61
     568:	9e b7       	in	r25, 0x3e	; 62
     56a:	8a 19       	sub	r24, r10
     56c:	9b 09       	sbc	r25, r11
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	9e bf       	out	0x3e, r25	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	8d bf       	out	0x3d, r24	; 61
     578:	8d b6       	in	r8, 0x3d	; 61
     57a:	9e b6       	in	r9, 0x3e	; 62
     57c:	e1 e0       	ldi	r30, 0x01	; 1
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	8e 0e       	add	r8, r30
     582:	9f 1e       	adc	r9, r31
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     584:	08 ee       	ldi	r16, 0xE8	; 232
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	f8 01       	movw	r30, r16
     58a:	80 81       	ld	r24, Z
     58c:	87 7f       	andi	r24, 0xF7	; 247
     58e:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     590:	b5 01       	movw	r22, r10
     592:	c4 01       	movw	r24, r8
     594:	53 d2       	rcall	.+1190   	; 0xa3c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     596:	f8 01       	movw	r30, r16
     598:	80 81       	ld	r24, Z
     59a:	8e 77       	andi	r24, 0x7E	; 126
     59c:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	71 10       	cpse	r7, r1
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <HID_Device_ProcessControlRequest+0x18a>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	85 01       	movw	r16, r10
     5aa:	02 1b       	sub	r16, r18
     5ac:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     5ae:	28 0d       	add	r18, r8
     5b0:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     5b2:	44 2d       	mov	r20, r4
     5b4:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     5b6:	67 2d       	mov	r22, r7
     5b8:	c6 01       	movw	r24, r12
     5ba:	ef de       	rcall	.-546    	; 0x39a <CALLBACK_HID_Device_ProcessHIDReport>
     5bc:	85 2d       	mov	r24, r5
     5be:	96 2d       	mov	r25, r6
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	9e bf       	out	0x3e, r25	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	8d bf       	out	0x3d, r24	; 61
     5ca:	63 c0       	rjmp	.+198    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5cc:	80 91 aa 01 	lds	r24, 0x01AA
     5d0:	81 3a       	cpi	r24, 0xA1	; 161
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <HID_Device_ProcessControlRequest+0x1ba>
     5d4:	5e c0       	rjmp	.+188    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5d6:	e8 ee       	ldi	r30, 0xE8	; 232
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	87 7f       	andi	r24, 0xF7	; 247
     5de:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5e0:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     5e2:	80 ff       	sbrs	r24, 0
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <HID_Device_ProcessControlRequest+0x1c4>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     5e6:	f6 01       	movw	r30, r12
     5e8:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5ea:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ee:	e8 ee       	ldi	r30, 0xE8	; 232
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	8e 77       	andi	r24, 0x7E	; 126
     5f6:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     5f8:	cc d3       	rcall	.+1944   	; 0xd92 <Endpoint_ClearStatusStage>
     5fa:	4b c0       	rjmp	.+150    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     5fc:	80 91 aa 01 	lds	r24, 0x01AA
     600:	81 32       	cpi	r24, 0x21	; 33
     602:	09 f0       	breq	.+2      	; 0x606 <HID_Device_ProcessControlRequest+0x1ea>
     604:	46 c0       	rjmp	.+140    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     606:	e8 ee       	ldi	r30, 0xE8	; 232
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	87 7f       	andi	r24, 0xF7	; 247
     60e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     610:	c0 d3       	rcall	.+1920   	; 0xd92 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     612:	90 91 ac 01 	lds	r25, 0x01AC
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	91 11       	cpse	r25, r1
     61a:	01 c0       	rjmp	.+2      	; 0x61e <HID_Device_ProcessControlRequest+0x202>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	f6 01       	movw	r30, r12
     620:	81 87       	std	Z+9, r24	; 0x09
     622:	37 c0       	rjmp	.+110    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     624:	80 91 aa 01 	lds	r24, 0x01AA
     628:	81 32       	cpi	r24, 0x21	; 33
     62a:	99 f5       	brne	.+102    	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     62c:	e8 ee       	ldi	r30, 0xE8	; 232
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	87 7f       	andi	r24, 0xF7	; 247
     634:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     636:	ad d3       	rcall	.+1882   	; 0xd92 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     638:	80 91 ac 01 	lds	r24, 0x01AC
     63c:	90 91 ad 01 	lds	r25, 0x01AD
     640:	88 27       	eor	r24, r24
     642:	00 24       	eor	r0, r0
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	00 1c       	adc	r0, r0
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	00 1c       	adc	r0, r0
     650:	89 2f       	mov	r24, r25
     652:	90 2d       	mov	r25, r0
     654:	f6 01       	movw	r30, r12
     656:	95 87       	std	Z+13, r25	; 0x0d
     658:	84 87       	std	Z+12, r24	; 0x0c
     65a:	1b c0       	rjmp	.+54     	; 0x692 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     65c:	80 91 aa 01 	lds	r24, 0x01AA
     660:	81 3a       	cpi	r24, 0xA1	; 161
     662:	b9 f4       	brne	.+46     	; 0x692 <HID_Device_ProcessControlRequest+0x276>
     664:	e8 ee       	ldi	r30, 0xE8	; 232
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	87 7f       	andi	r24, 0xF7	; 247
     66c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     66e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     670:	80 ff       	sbrs	r24, 0
     672:	fd cf       	rjmp	.-6      	; 0x66e <HID_Device_ProcessControlRequest+0x252>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     674:	f6 01       	movw	r30, r12
     676:	84 85       	ldd	r24, Z+12	; 0x0c
     678:	95 85       	ldd	r25, Z+13	; 0x0d
     67a:	96 95       	lsr	r25
     67c:	87 95       	ror	r24
     67e:	96 95       	lsr	r25
     680:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     682:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     686:	e8 ee       	ldi	r30, 0xE8	; 232
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	8e 77       	andi	r24, 0x7E	; 126
     68e:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     690:	80 d3       	rcall	.+1792   	; 0xd92 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	fe be       	out	0x3e, r15	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	ed be       	out	0x3d, r14	; 61
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	7f 90       	pop	r7
     6bc:	6f 90       	pop	r6
     6be:	5f 90       	pop	r5
     6c0:	4f 90       	pop	r4
     6c2:	3f 90       	pop	r3
     6c4:	08 95       	ret

000006c6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     6c6:	9c 01       	movw	r18, r24
     6c8:	27 5f       	subi	r18, 0xF7	; 247
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	e2 2f       	mov	r30, r18
     6ce:	f3 2f       	mov	r31, r19
     6d0:	27 e0       	ldi	r18, 0x07	; 7
     6d2:	df 01       	movw	r26, r30
     6d4:	1d 92       	st	X+, r1
     6d6:	2a 95       	dec	r18
     6d8:	e9 f7       	brne	.-6      	; 0x6d4 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     6da:	21 e0       	ldi	r18, 0x01	; 1
     6dc:	fc 01       	movw	r30, r24
     6de:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     6e0:	24 ef       	ldi	r18, 0xF4	; 244
     6e2:	31 e0       	ldi	r19, 0x01	; 1
     6e4:	35 87       	std	Z+13, r19	; 0x0d
     6e6:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     6e8:	23 e0       	ldi	r18, 0x03	; 3
     6ea:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	01 96       	adiw	r24, 0x01	; 1
	  return false;

	return true;
}
     6f0:	e9 c2       	rjmp	.+1490   	; 0xcc4 <Endpoint_ConfigureEndpointTable>

000006f2 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     6f2:	4f 92       	push	r4
     6f4:	5f 92       	push	r5
     6f6:	6f 92       	push	r6
     6f8:	7f 92       	push	r7
     6fa:	8f 92       	push	r8
     6fc:	9f 92       	push	r9
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <HID_Device_USBTask+0x22>
     714:	1f 92       	push	r1
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     71c:	cd b6       	in	r12, 0x3d	; 61
     71e:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     720:	80 91 a9 01 	lds	r24, 0x01A9
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	09 f0       	breq	.+2      	; 0x72a <HID_Device_USBTask+0x38>
     728:	9a c0       	rjmp	.+308    	; 0x85e <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     72a:	80 91 e4 00 	lds	r24, 0x00E4
     72e:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     732:	f7 01       	movw	r30, r14
     734:	22 85       	ldd	r18, Z+10	; 0x0a
     736:	33 85       	ldd	r19, Z+11	; 0x0b
     738:	28 17       	cp	r18, r24
     73a:	39 07       	cpc	r19, r25
     73c:	09 f4       	brne	.+2      	; 0x740 <HID_Device_USBTask+0x4e>
     73e:	8f c0       	rjmp	.+286    	; 0x85e <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	8f 70       	andi	r24, 0x0F	; 15
     744:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     748:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     74c:	85 ff       	sbrs	r24, 5
     74e:	87 c0       	rjmp	.+270    	; 0x85e <HID_Device_USBTask+0x16c>
     750:	6d b6       	in	r6, 0x3d	; 61
     752:	7e b6       	in	r7, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     754:	40 85       	ldd	r20, Z+8	; 0x08
     756:	8d b7       	in	r24, 0x3d	; 61
     758:	9e b7       	in	r25, 0x3e	; 62
     75a:	84 1b       	sub	r24, r20
     75c:	91 09       	sbc	r25, r1
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	9e bf       	out	0x3e, r25	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	8d bf       	out	0x3d, r24	; 61
     768:	ad b6       	in	r10, 0x3d	; 61
     76a:	be b6       	in	r11, 0x3e	; 62
     76c:	e1 e0       	ldi	r30, 0x01	; 1
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ae 0e       	add	r10, r30
     772:	bf 1e       	adc	r11, r31
		uint8_t  ReportID     = 0;
     774:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     776:	1a 82       	std	Y+2, r1	; 0x02
     778:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     77a:	8a 2c       	mov	r8, r10
     77c:	9b 2c       	mov	r9, r11
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	8a 2d       	mov	r24, r10
     786:	9b 2d       	mov	r25, r11
     788:	f6 d5       	rcall	.+3052   	; 0x1376 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     78a:	8e 01       	movw	r16, r28
     78c:	0f 5f       	subi	r16, 0xFF	; 255
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	2a 2d       	mov	r18, r10
     792:	3b 2d       	mov	r19, r11
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	be 01       	movw	r22, r28
     798:	6d 5f       	subi	r22, 0xFD	; 253
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	c7 01       	movw	r24, r14
     79e:	94 dd       	rcall	.-1240   	; 0x2c8 <CALLBACK_HID_Device_CreateHIDReport>
     7a0:	48 2e       	mov	r4, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     7a2:	f7 01       	movw	r30, r14
     7a4:	84 85       	ldd	r24, Z+12	; 0x0c
     7a6:	95 85       	ldd	r25, Z+13	; 0x0d
     7a8:	89 2b       	or	r24, r25
     7aa:	49 f0       	breq	.+18     	; 0x7be <HID_Device_USBTask+0xcc>
     7ac:	01 e0       	ldi	r16, 0x01	; 1
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	86 85       	ldd	r24, Z+14	; 0x0e
     7b2:	97 85       	ldd	r25, Z+15	; 0x0f
     7b4:	89 2b       	or	r24, r25
     7b6:	29 f0       	breq	.+10     	; 0x7c2 <HID_Device_USBTask+0xd0>
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <HID_Device_USBTask+0xd0>
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     7c2:	f7 01       	movw	r30, r14
     7c4:	a6 80       	ldd	r10, Z+6	; 0x06
     7c6:	b7 80       	ldd	r11, Z+7	; 0x07
     7c8:	a1 14       	cp	r10, r1
     7ca:	b1 04       	cpc	r11, r1
     7cc:	b1 f0       	breq	.+44     	; 0x7fa <HID_Device_USBTask+0x108>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     7ce:	49 81       	ldd	r20, Y+1	; 0x01
     7d0:	5a 81       	ldd	r21, Y+2	; 0x02
     7d2:	b5 01       	movw	r22, r10
     7d4:	88 2d       	mov	r24, r8
     7d6:	99 2d       	mov	r25, r9
     7d8:	b8 d5       	rcall	.+2928   	; 0x134a <memcmp>
     7da:	28 2f       	mov	r18, r24
     7dc:	39 2f       	mov	r19, r25
     7de:	55 24       	eor	r5, r5
     7e0:	53 94       	inc	r5
     7e2:	23 2b       	or	r18, r19
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <HID_Device_USBTask+0xf6>
     7e6:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     7e8:	f7 01       	movw	r30, r14
     7ea:	40 85       	ldd	r20, Z+8	; 0x08
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	68 2d       	mov	r22, r8
     7f0:	79 2d       	mov	r23, r9
     7f2:	8a 2d       	mov	r24, r10
     7f4:	9b 2d       	mov	r25, r11
     7f6:	b6 d5       	rcall	.+2924   	; 0x1364 <memcpy>
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <HID_Device_USBTask+0x10a>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     7fa:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	89 2b       	or	r24, r25
     802:	f9 f0       	breq	.+62     	; 0x842 <HID_Device_USBTask+0x150>
     804:	41 10       	cpse	r4, r1
     806:	04 c0       	rjmp	.+8      	; 0x810 <HID_Device_USBTask+0x11e>
     808:	51 10       	cpse	r5, r1
     80a:	02 c0       	rjmp	.+4      	; 0x810 <HID_Device_USBTask+0x11e>
     80c:	00 ff       	sbrs	r16, 0
     80e:	19 c0       	rjmp	.+50     	; 0x842 <HID_Device_USBTask+0x150>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     810:	f7 01       	movw	r30, r14
     812:	84 85       	ldd	r24, Z+12	; 0x0c
     814:	95 85       	ldd	r25, Z+13	; 0x0d
     816:	97 87       	std	Z+15, r25	; 0x0f
     818:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	8f 70       	andi	r24, 0x0F	; 15
     81e:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     826:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     82a:	69 81       	ldd	r22, Y+1	; 0x01
     82c:	7a 81       	ldd	r23, Y+2	; 0x02
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	88 2d       	mov	r24, r8
     834:	99 2d       	mov	r25, r9
     836:	2c d0       	rcall	.+88     	; 0x890 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     838:	e8 ee       	ldi	r30, 0xE8	; 232
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	8e 77       	andi	r24, 0x7E	; 126
     840:	80 83       	st	Z, r24
     842:	80 91 e4 00 	lds	r24, 0x00E4
     846:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     84a:	f7 01       	movw	r30, r14
     84c:	93 87       	std	Z+11, r25	; 0x0b
     84e:	82 87       	std	Z+10, r24	; 0x0a
     850:	86 2d       	mov	r24, r6
     852:	97 2d       	mov	r25, r7
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	9e bf       	out	0x3e, r25	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	8d bf       	out	0x3d, r24	; 61
	}
}
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de be       	out	0x3e, r13	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd be       	out	0x3d, r12	; 61
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	bf 90       	pop	r11
     880:	af 90       	pop	r10
     882:	9f 90       	pop	r9
     884:	8f 90       	pop	r8
     886:	7f 90       	pop	r7
     888:	6f 90       	pop	r6
     88a:	5f 90       	pop	r5
     88c:	4f 90       	pop	r4
     88e:	08 95       	ret

00000890 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     890:	7f 92       	push	r7
     892:	8f 92       	push	r8
     894:	9f 92       	push	r9
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	7c 01       	movw	r14, r24
     8ac:	eb 01       	movw	r28, r22
     8ae:	5a 01       	movw	r10, r20
     8b0:	95 d2       	rcall	.+1322   	; 0xddc <Endpoint_WaitUntilReady>
     8b2:	78 2e       	mov	r7, r24
     8b4:	81 11       	cpse	r24, r1
     8b6:	3f c0       	rjmp	.+126    	; 0x936 <Endpoint_Write_Stream_LE+0xa6>
     8b8:	a1 14       	cp	r10, r1
     8ba:	b1 04       	cpc	r11, r1
     8bc:	39 f0       	breq	.+14     	; 0x8cc <Endpoint_Write_Stream_LE+0x3c>
     8be:	f5 01       	movw	r30, r10
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	c2 1b       	sub	r28, r18
     8c6:	d3 0b       	sbc	r29, r19
     8c8:	e2 0e       	add	r14, r18
     8ca:	f3 1e       	adc	r15, r19
     8cc:	20 97       	sbiw	r28, 0x00	; 0
     8ce:	99 f1       	breq	.+102    	; 0x936 <Endpoint_Write_Stream_LE+0xa6>
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f8 ee       	ldi	r31, 0xE8	; 232
     8d8:	8f 2e       	mov	r8, r31
     8da:	91 2c       	mov	r9, r1
     8dc:	f0 2d       	mov	r31, r0
     8de:	0f 2e       	mov	r0, r31
     8e0:	f1 ef       	ldi	r31, 0xF1	; 241
     8e2:	cf 2e       	mov	r12, r31
     8e4:	d1 2c       	mov	r13, r1
     8e6:	f0 2d       	mov	r31, r0
     8e8:	f4 01       	movw	r30, r8
     8ea:	90 81       	ld	r25, Z
     8ec:	95 fd       	sbrc	r25, 5
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <Endpoint_Write_Stream_LE+0x8e>
     8f0:	80 81       	ld	r24, Z
     8f2:	8e 77       	andi	r24, 0x7E	; 126
     8f4:	80 83       	st	Z, r24
     8f6:	0e d5       	rcall	.+2588   	; 0x1314 <USB_USBTask>
     8f8:	a1 14       	cp	r10, r1
     8fa:	b1 04       	cpc	r11, r1
     8fc:	61 f0       	breq	.+24     	; 0x916 <Endpoint_Write_Stream_LE+0x86>
     8fe:	f5 01       	movw	r30, r10
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	08 0f       	add	r16, r24
     906:	19 1f       	adc	r17, r25
     908:	11 83       	std	Z+1, r17	; 0x01
     90a:	00 83       	st	Z, r16
     90c:	0f 2e       	mov	r0, r31
     90e:	f5 e0       	ldi	r31, 0x05	; 5
     910:	7f 2e       	mov	r7, r31
     912:	f0 2d       	mov	r31, r0
     914:	10 c0       	rjmp	.+32     	; 0x936 <Endpoint_Write_Stream_LE+0xa6>
     916:	62 d2       	rcall	.+1220   	; 0xddc <Endpoint_WaitUntilReady>
     918:	88 23       	and	r24, r24
     91a:	49 f0       	breq	.+18     	; 0x92e <Endpoint_Write_Stream_LE+0x9e>
     91c:	0b c0       	rjmp	.+22     	; 0x934 <Endpoint_Write_Stream_LE+0xa4>
     91e:	f7 01       	movw	r30, r14
     920:	81 91       	ld	r24, Z+
     922:	7f 01       	movw	r14, r30
     924:	f6 01       	movw	r30, r12
     926:	80 83       	st	Z, r24
     928:	21 97       	sbiw	r28, 0x01	; 1
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	20 97       	sbiw	r28, 0x00	; 0
     930:	d9 f6       	brne	.-74     	; 0x8e8 <Endpoint_Write_Stream_LE+0x58>
     932:	01 c0       	rjmp	.+2      	; 0x936 <Endpoint_Write_Stream_LE+0xa6>
     934:	78 2e       	mov	r7, r24
     936:	87 2d       	mov	r24, r7
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	08 95       	ret

00000954 <Endpoint_Write_Control_Stream_LE>:
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	20 91 b0 01 	lds	r18, 0x01B0
     960:	30 91 b1 01 	lds	r19, 0x01B1
     964:	26 17       	cp	r18, r22
     966:	37 07       	cpc	r19, r23
     968:	58 f0       	brcs	.+22     	; 0x980 <Endpoint_Write_Control_Stream_LE+0x2c>
     96a:	61 15       	cp	r22, r1
     96c:	71 05       	cpc	r23, r1
     96e:	39 f4       	brne	.+14     	; 0x97e <Endpoint_Write_Control_Stream_LE+0x2a>
     970:	e8 ee       	ldi	r30, 0xE8	; 232
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	20 81       	ld	r18, Z
     976:	2e 77       	andi	r18, 0x7E	; 126
     978:	20 83       	st	Z, r18
     97a:	9b 01       	movw	r18, r22
     97c:	01 c0       	rjmp	.+2      	; 0x980 <Endpoint_Write_Control_Stream_LE+0x2c>
     97e:	9b 01       	movw	r18, r22
     980:	e0 e0       	ldi	r30, 0x00	; 0
     982:	a8 ee       	ldi	r26, 0xE8	; 232
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	62 ef       	ldi	r22, 0xF2	; 242
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	11 e0       	ldi	r17, 0x01	; 1
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	c1 ef       	ldi	r28, 0xF1	; 241
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	32 c0       	rjmp	.+100    	; 0x9f8 <Endpoint_Write_Control_Stream_LE+0xa4>
     994:	40 91 a9 01 	lds	r20, 0x01A9
     998:	44 23       	and	r20, r20
     99a:	09 f4       	brne	.+2      	; 0x99e <Endpoint_Write_Control_Stream_LE+0x4a>
     99c:	41 c0       	rjmp	.+130    	; 0xa20 <Endpoint_Write_Control_Stream_LE+0xcc>
     99e:	45 30       	cpi	r20, 0x05	; 5
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <Endpoint_Write_Control_Stream_LE+0x50>
     9a2:	40 c0       	rjmp	.+128    	; 0xa24 <Endpoint_Write_Control_Stream_LE+0xd0>
     9a4:	4c 91       	ld	r20, X
     9a6:	43 fd       	sbrc	r20, 3
     9a8:	3f c0       	rjmp	.+126    	; 0xa28 <Endpoint_Write_Control_Stream_LE+0xd4>
     9aa:	4c 91       	ld	r20, X
     9ac:	42 fd       	sbrc	r20, 2
     9ae:	31 c0       	rjmp	.+98     	; 0xa12 <Endpoint_Write_Control_Stream_LE+0xbe>
     9b0:	4c 91       	ld	r20, X
     9b2:	40 ff       	sbrs	r20, 0
     9b4:	21 c0       	rjmp	.+66     	; 0x9f8 <Endpoint_Write_Control_Stream_LE+0xa4>
     9b6:	fb 01       	movw	r30, r22
     9b8:	40 81       	ld	r20, Z
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	21 15       	cp	r18, r1
     9be:	31 05       	cpc	r19, r1
     9c0:	99 f0       	breq	.+38     	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x94>
     9c2:	48 30       	cpi	r20, 0x08	; 8
     9c4:	51 05       	cpc	r21, r1
     9c6:	80 f4       	brcc	.+32     	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x94>
     9c8:	e8 2f       	mov	r30, r24
     9ca:	f9 2f       	mov	r31, r25
     9cc:	81 91       	ld	r24, Z+
     9ce:	88 83       	st	Y, r24
     9d0:	8e 2f       	mov	r24, r30
     9d2:	9f 2f       	mov	r25, r31
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	31 09       	sbc	r19, r1
     9d8:	4f 5f       	subi	r20, 0xFF	; 255
     9da:	5f 4f       	sbci	r21, 0xFF	; 255
     9dc:	21 15       	cp	r18, r1
     9de:	31 05       	cpc	r19, r1
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x94>
     9e2:	48 30       	cpi	r20, 0x08	; 8
     9e4:	51 05       	cpc	r21, r1
     9e6:	91 f7       	brne	.-28     	; 0x9cc <Endpoint_Write_Control_Stream_LE+0x78>
     9e8:	e1 2f       	mov	r30, r17
     9ea:	48 30       	cpi	r20, 0x08	; 8
     9ec:	51 05       	cpc	r21, r1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <Endpoint_Write_Control_Stream_LE+0x9e>
     9f0:	e0 2f       	mov	r30, r16
     9f2:	4c 91       	ld	r20, X
     9f4:	4e 77       	andi	r20, 0x7E	; 126
     9f6:	4c 93       	st	X, r20
     9f8:	21 15       	cp	r18, r1
     9fa:	31 05       	cpc	r19, r1
     9fc:	59 f6       	brne	.-106    	; 0x994 <Endpoint_Write_Control_Stream_LE+0x40>
     9fe:	e1 11       	cpse	r30, r1
     a00:	c9 cf       	rjmp	.-110    	; 0x994 <Endpoint_Write_Control_Stream_LE+0x40>
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <Endpoint_Write_Control_Stream_LE+0xbe>
     a04:	80 91 a9 01 	lds	r24, 0x01A9
     a08:	88 23       	and	r24, r24
     a0a:	81 f0       	breq	.+32     	; 0xa2c <Endpoint_Write_Control_Stream_LE+0xd8>
     a0c:	85 30       	cpi	r24, 0x05	; 5
     a0e:	19 f4       	brne	.+6      	; 0xa16 <Endpoint_Write_Control_Stream_LE+0xc2>
     a10:	0f c0       	rjmp	.+30     	; 0xa30 <Endpoint_Write_Control_Stream_LE+0xdc>
     a12:	e8 ee       	ldi	r30, 0xE8	; 232
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	82 ff       	sbrs	r24, 2
     a1a:	f4 cf       	rjmp	.-24     	; 0xa04 <Endpoint_Write_Control_Stream_LE+0xb0>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xde>
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xde>
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xde>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xde>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xde>
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <Endpoint_Read_Control_Stream_LE>:
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	61 15       	cp	r22, r1
     a46:	71 05       	cpc	r23, r1
     a48:	29 f4       	brne	.+10     	; 0xa54 <Endpoint_Read_Control_Stream_LE+0x18>
     a4a:	e8 ee       	ldi	r30, 0xE8	; 232
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 81       	ld	r18, Z
     a50:	2b 77       	andi	r18, 0x7B	; 123
     a52:	20 83       	st	Z, r18
     a54:	a8 ee       	ldi	r26, 0xE8	; 232
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	02 ef       	ldi	r16, 0xF2	; 242
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	21 ef       	ldi	r18, 0xF1	; 241
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	1c c0       	rjmp	.+56     	; 0xa9a <Endpoint_Read_Control_Stream_LE+0x5e>
     a62:	40 91 a9 01 	lds	r20, 0x01A9
     a66:	44 23       	and	r20, r20
     a68:	b1 f1       	breq	.+108    	; 0xad6 <Endpoint_Read_Control_Stream_LE+0x9a>
     a6a:	45 30       	cpi	r20, 0x05	; 5
     a6c:	b1 f1       	breq	.+108    	; 0xada <Endpoint_Read_Control_Stream_LE+0x9e>
     a6e:	4c 91       	ld	r20, X
     a70:	43 fd       	sbrc	r20, 3
     a72:	35 c0       	rjmp	.+106    	; 0xade <Endpoint_Read_Control_Stream_LE+0xa2>
     a74:	4c 91       	ld	r20, X
     a76:	42 ff       	sbrs	r20, 2
     a78:	f4 cf       	rjmp	.-24     	; 0xa62 <Endpoint_Read_Control_Stream_LE+0x26>
     a7a:	3d c0       	rjmp	.+122    	; 0xaf6 <Endpoint_Read_Control_Stream_LE+0xba>
     a7c:	e9 01       	movw	r28, r18
     a7e:	88 81       	ld	r24, Y
     a80:	81 93       	st	Z+, r24
     a82:	8e 2f       	mov	r24, r30
     a84:	9f 2f       	mov	r25, r31
     a86:	61 50       	subi	r22, 0x01	; 1
     a88:	71 09       	sbc	r23, r1
     a8a:	21 f0       	breq	.+8      	; 0xa94 <Endpoint_Read_Control_Stream_LE+0x58>
     a8c:	e8 01       	movw	r28, r16
     a8e:	48 81       	ld	r20, Y
     a90:	41 11       	cpse	r20, r1
     a92:	f4 cf       	rjmp	.-24     	; 0xa7c <Endpoint_Read_Control_Stream_LE+0x40>
     a94:	4c 91       	ld	r20, X
     a96:	4b 77       	andi	r20, 0x7B	; 123
     a98:	4c 93       	st	X, r20
     a9a:	61 15       	cp	r22, r1
     a9c:	71 05       	cpc	r23, r1
     a9e:	a1 f0       	breq	.+40     	; 0xac8 <Endpoint_Read_Control_Stream_LE+0x8c>
     aa0:	40 91 a9 01 	lds	r20, 0x01A9
     aa4:	44 23       	and	r20, r20
     aa6:	e9 f0       	breq	.+58     	; 0xae2 <Endpoint_Read_Control_Stream_LE+0xa6>
     aa8:	45 30       	cpi	r20, 0x05	; 5
     aaa:	e9 f0       	breq	.+58     	; 0xae6 <Endpoint_Read_Control_Stream_LE+0xaa>
     aac:	4c 91       	ld	r20, X
     aae:	43 fd       	sbrc	r20, 3
     ab0:	1c c0       	rjmp	.+56     	; 0xaea <Endpoint_Read_Control_Stream_LE+0xae>
     ab2:	4c 91       	ld	r20, X
     ab4:	42 ff       	sbrs	r20, 2
     ab6:	d5 cf       	rjmp	.-86     	; 0xa62 <Endpoint_Read_Control_Stream_LE+0x26>
     ab8:	1e c0       	rjmp	.+60     	; 0xaf6 <Endpoint_Read_Control_Stream_LE+0xba>
     aba:	80 91 a9 01 	lds	r24, 0x01A9
     abe:	88 23       	and	r24, r24
     ac0:	b1 f0       	breq	.+44     	; 0xaee <Endpoint_Read_Control_Stream_LE+0xb2>
     ac2:	85 30       	cpi	r24, 0x05	; 5
     ac4:	19 f4       	brne	.+6      	; 0xacc <Endpoint_Read_Control_Stream_LE+0x90>
     ac6:	15 c0       	rjmp	.+42     	; 0xaf2 <Endpoint_Read_Control_Stream_LE+0xb6>
     ac8:	e8 ee       	ldi	r30, 0xE8	; 232
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	80 ff       	sbrs	r24, 0
     ad0:	f4 cf       	rjmp	.-24     	; 0xaba <Endpoint_Read_Control_Stream_LE+0x7e>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	15 c0       	rjmp	.+42     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	13 c0       	rjmp	.+38     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	0f c0       	rjmp	.+30     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	0d c0       	rjmp	.+26     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	09 c0       	rjmp	.+18     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <Endpoint_Read_Control_Stream_LE+0xc8>
     af6:	f8 01       	movw	r30, r16
     af8:	40 81       	ld	r20, Z
     afa:	44 23       	and	r20, r20
     afc:	59 f2       	breq	.-106    	; 0xa94 <Endpoint_Read_Control_Stream_LE+0x58>
     afe:	e8 2f       	mov	r30, r24
     b00:	f9 2f       	mov	r31, r25
     b02:	bc cf       	rjmp	.-136    	; 0xa7c <Endpoint_Read_Control_Stream_LE+0x40>
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     b18:	20 91 b0 01 	lds	r18, 0x01B0
     b1c:	30 91 b1 01 	lds	r19, 0x01B1
     b20:	26 17       	cp	r18, r22
     b22:	37 07       	cpc	r19, r23
     b24:	58 f0       	brcs	.+22     	; 0xb3c <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     b26:	61 15       	cp	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b2c:	e8 ee       	ldi	r30, 0xE8	; 232
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	20 81       	ld	r18, Z
     b32:	2e 77       	andi	r18, 0x7E	; 126
     b34:	20 83       	st	Z, r18
     b36:	9b 01       	movw	r18, r22
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <Endpoint_Write_Control_PStream_LE+0x2e>
     b3a:	9b 01       	movw	r18, r22
     b3c:	e8 2f       	mov	r30, r24
     b3e:	f9 2f       	mov	r31, r25
     b40:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b42:	a8 ee       	ldi	r26, 0xE8	; 232
     b44:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     b46:	42 ef       	ldi	r20, 0xF2	; 242
     b48:	50 e0       	ldi	r21, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b4e:	0f 2e       	mov	r0, r31
     b50:	f1 ef       	ldi	r31, 0xF1	; 241
     b52:	ef 2e       	mov	r14, r31
     b54:	f1 2c       	mov	r15, r1
     b56:	f0 2d       	mov	r31, r0
     b58:	2e c0       	rjmp	.+92     	; 0xbb6 <Endpoint_Write_Control_PStream_LE+0xa8>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b5a:	80 91 a9 01 	lds	r24, 0x01A9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <Endpoint_Write_Control_PStream_LE+0x56>
     b62:	3d c0       	rjmp	.+122    	; 0xbde <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b64:	85 30       	cpi	r24, 0x05	; 5
     b66:	09 f4       	brne	.+2      	; 0xb6a <Endpoint_Write_Control_PStream_LE+0x5c>
     b68:	3c c0       	rjmp	.+120    	; 0xbe2 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b6a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b6c:	83 fd       	sbrc	r24, 3
     b6e:	3b c0       	rjmp	.+118    	; 0xbe6 <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b70:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b72:	82 fd       	sbrc	r24, 2
     b74:	2d c0       	rjmp	.+90     	; 0xbd0 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b76:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     b78:	80 ff       	sbrs	r24, 0
     b7a:	1d c0       	rjmp	.+58     	; 0xbb6 <Endpoint_Write_Control_PStream_LE+0xa8>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     b7c:	ea 01       	movw	r28, r20
     b7e:	88 81       	ld	r24, Y
     b80:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b82:	21 15       	cp	r18, r1
     b84:	31 05       	cpc	r19, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <Endpoint_Write_Control_PStream_LE+0x9a>
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	91 05       	cpc	r25, r1
     b8c:	68 f4       	brcc	.+26     	; 0xba8 <Endpoint_Write_Control_PStream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b8e:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b90:	e7 01       	movw	r28, r14
     b92:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b94:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     b9a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b9c:	21 15       	cp	r18, r1
     b9e:	31 05       	cpc	r19, r1
     ba0:	19 f0       	breq	.+6      	; 0xba8 <Endpoint_Write_Control_PStream_LE+0x9a>
     ba2:	88 30       	cpi	r24, 0x08	; 8
     ba4:	91 05       	cpc	r25, r1
     ba6:	99 f7       	brne	.-26     	; 0xb8e <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ba8:	67 2f       	mov	r22, r23
     baa:	08 97       	sbiw	r24, 0x08	; 8
     bac:	09 f0       	breq	.+2      	; 0xbb0 <Endpoint_Write_Control_PStream_LE+0xa2>
     bae:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bb0:	8c 91       	ld	r24, X
     bb2:	8e 77       	andi	r24, 0x7E	; 126
     bb4:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     bb6:	21 15       	cp	r18, r1
     bb8:	31 05       	cpc	r19, r1
     bba:	79 f6       	brne	.-98     	; 0xb5a <Endpoint_Write_Control_PStream_LE+0x4c>
     bbc:	61 11       	cpse	r22, r1
     bbe:	cd cf       	rjmp	.-102    	; 0xb5a <Endpoint_Write_Control_PStream_LE+0x4c>
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <Endpoint_Write_Control_PStream_LE+0xc2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bc2:	80 91 a9 01 	lds	r24, 0x01A9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bc6:	88 23       	and	r24, r24
     bc8:	81 f0       	breq	.+32     	; 0xbea <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <Endpoint_Write_Control_PStream_LE+0xc6>
     bce:	0f c0       	rjmp	.+30     	; 0xbee <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bd0:	e8 ee       	ldi	r30, 0xE8	; 232
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     bd6:	82 ff       	sbrs	r24, 2
     bd8:	f4 cf       	rjmp	.-24     	; 0xbc2 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     bee:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	08 95       	ret

00000bfc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	70 f1       	brcs	.+92     	; 0xc72 <Endpoint_ConfigureEndpoint_Prv+0x76>
     c16:	26 c0       	rjmp	.+76     	; 0xc64 <Endpoint_ConfigureEndpoint_Prv+0x68>
     c18:	59 2f       	mov	r21, r25
     c1a:	5f 70       	andi	r21, 0x0F	; 15
     c1c:	e8 01       	movw	r28, r16
     c1e:	58 83       	st	Y, r21
     c20:	89 17       	cp	r24, r25
     c22:	31 f0       	breq	.+12     	; 0xc30 <Endpoint_ConfigureEndpoint_Prv+0x34>
     c24:	e9 01       	movw	r28, r18
     c26:	d8 80       	ld	r13, Y
     c28:	50 81       	ld	r21, Z
     c2a:	e4 01       	movw	r28, r8
     c2c:	78 81       	ld	r23, Y
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     c30:	5b 2d       	mov	r21, r11
     c32:	d6 2e       	mov	r13, r22
     c34:	7c 2d       	mov	r23, r12
     c36:	51 ff       	sbrs	r21, 1
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <Endpoint_ConfigureEndpoint_Prv+0x62>
     c3a:	4c 91       	ld	r20, X
     c3c:	4e 7f       	andi	r20, 0xFE	; 254
     c3e:	4c 93       	st	X, r20
     c40:	40 81       	ld	r20, Z
     c42:	4d 7f       	andi	r20, 0xFD	; 253
     c44:	40 83       	st	Z, r20
     c46:	4c 91       	ld	r20, X
     c48:	41 60       	ori	r20, 0x01	; 1
     c4a:	4c 93       	st	X, r20
     c4c:	e9 01       	movw	r28, r18
     c4e:	d8 82       	st	Y, r13
     c50:	50 83       	st	Z, r21
     c52:	e4 01       	movw	r28, r8
     c54:	78 83       	st	Y, r23
     c56:	e7 01       	movw	r28, r14
     c58:	58 81       	ld	r21, Y
     c5a:	55 23       	and	r21, r21
     c5c:	44 f4       	brge	.+16     	; 0xc6e <Endpoint_ConfigureEndpoint_Prv+0x72>
     c5e:	9f 5f       	subi	r25, 0xFF	; 255
     c60:	95 30       	cpi	r25, 0x05	; 5
     c62:	d1 f6       	brne	.-76     	; 0xc18 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	80 93 e9 00 	sts	0x00E9, r24
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	1f c0       	rjmp	.+62     	; 0xcac <Endpoint_ConfigureEndpoint_Prv+0xb0>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	1d c0       	rjmp	.+58     	; 0xcac <Endpoint_ConfigureEndpoint_Prv+0xb0>
     c72:	98 2f       	mov	r25, r24
     c74:	9f 70       	andi	r25, 0x0F	; 15
     c76:	90 93 e9 00 	sts	0x00E9, r25
     c7a:	98 2f       	mov	r25, r24
     c7c:	54 2f       	mov	r21, r20
     c7e:	d6 2e       	mov	r13, r22
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	ab ee       	ldi	r26, 0xEB	; 235
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ed ee       	ldi	r30, 0xED	; 237
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	2c ee       	ldi	r18, 0xEC	; 236
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	0f 2e       	mov	r0, r31
     c90:	f0 ef       	ldi	r31, 0xF0	; 240
     c92:	8f 2e       	mov	r8, r31
     c94:	91 2c       	mov	r9, r1
     c96:	f0 2d       	mov	r31, r0
     c98:	0f 2e       	mov	r0, r31
     c9a:	fe ee       	ldi	r31, 0xEE	; 238
     c9c:	ef 2e       	mov	r14, r31
     c9e:	f1 2c       	mov	r15, r1
     ca0:	f0 2d       	mov	r31, r0
     ca2:	09 ee       	ldi	r16, 0xE9	; 233
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	b4 2e       	mov	r11, r20
     ca8:	c1 2c       	mov	r12, r1
     caa:	c5 cf       	rjmp	.-118    	; 0xc36 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	08 95       	ret

00000cc4 <Endpoint_ConfigureEndpointTable>:
     cc4:	9f 92       	push	r9
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	c6 2e       	mov	r12, r22
     cdc:	66 23       	and	r22, r22
     cde:	09 f4       	brne	.+2      	; 0xce2 <Endpoint_ConfigureEndpointTable+0x1e>
     ce0:	47 c0       	rjmp	.+142    	; 0xd70 <Endpoint_ConfigureEndpointTable+0xac>
     ce2:	ec 01       	movw	r28, r24
     ce4:	8c 01       	movw	r16, r24
     ce6:	0c 5f       	subi	r16, 0xFC	; 252
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	d1 2c       	mov	r13, r1
     cec:	b1 2c       	mov	r11, r1
     cee:	68 94       	set
     cf0:	ee 24       	eor	r14, r14
     cf2:	e3 f8       	bld	r14, 3
     cf4:	f1 2c       	mov	r15, r1
     cf6:	68 94       	set
     cf8:	99 24       	eor	r9, r9
     cfa:	91 f8       	bld	r9, 1
     cfc:	0f 2e       	mov	r0, r31
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	af 2e       	mov	r10, r31
     d02:	f0 2d       	mov	r31, r0
     d04:	58 81       	ld	r21, Y
     d06:	55 23       	and	r21, r21
     d08:	59 f1       	breq	.+86     	; 0xd60 <Endpoint_ConfigureEndpointTable+0x9c>
     d0a:	f8 01       	movw	r30, r16
     d0c:	90 81       	ld	r25, Z
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	d8 01       	movw	r26, r16
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	6c 91       	ld	r22, X
     d18:	85 2f       	mov	r24, r21
     d1a:	8f 70       	andi	r24, 0x0F	; 15
     d1c:	85 30       	cpi	r24, 0x05	; 5
     d1e:	50 f5       	brcc	.+84     	; 0xd74 <Endpoint_ConfigureEndpointTable+0xb0>
     d20:	92 30       	cpi	r25, 0x02	; 2
     d22:	10 f0       	brcs	.+4      	; 0xd28 <Endpoint_ConfigureEndpointTable+0x64>
     d24:	4a 2d       	mov	r20, r10
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <Endpoint_ConfigureEndpointTable+0x66>
     d28:	49 2d       	mov	r20, r9
     d2a:	e9 30       	cpi	r30, 0x09	; 9
     d2c:	f1 05       	cpc	r31, r1
     d2e:	48 f0       	brcs	.+18     	; 0xd42 <Endpoint_ConfigureEndpointTable+0x7e>
     d30:	97 01       	movw	r18, r14
     d32:	9b 2d       	mov	r25, r11
     d34:	9f 5f       	subi	r25, 0xFF	; 255
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	2e 17       	cp	r18, r30
     d3c:	3f 07       	cpc	r19, r31
     d3e:	d0 f3       	brcs	.-12     	; 0xd34 <Endpoint_ConfigureEndpointTable+0x70>
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <Endpoint_ConfigureEndpointTable+0x80>
     d42:	9b 2d       	mov	r25, r11
     d44:	92 95       	swap	r25
     d46:	90 7f       	andi	r25, 0xF0	; 240
     d48:	49 2b       	or	r20, r25
     d4a:	62 95       	swap	r22
     d4c:	66 0f       	add	r22, r22
     d4e:	66 0f       	add	r22, r22
     d50:	60 7c       	andi	r22, 0xC0	; 192
     d52:	55 1f       	adc	r21, r21
     d54:	55 27       	eor	r21, r21
     d56:	55 1f       	adc	r21, r21
     d58:	65 2b       	or	r22, r21
     d5a:	50 df       	rcall	.-352    	; 0xbfc <Endpoint_ConfigureEndpoint_Prv>
     d5c:	88 23       	and	r24, r24
     d5e:	61 f0       	breq	.+24     	; 0xd78 <Endpoint_ConfigureEndpointTable+0xb4>
     d60:	d3 94       	inc	r13
     d62:	25 96       	adiw	r28, 0x05	; 5
     d64:	0b 5f       	subi	r16, 0xFB	; 251
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	dc 10       	cpse	r13, r12
     d6a:	cc cf       	rjmp	.-104    	; 0xd04 <Endpoint_ConfigureEndpointTable+0x40>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <Endpoint_ConfigureEndpointTable+0xb6>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <Endpoint_ConfigureEndpointTable+0xb6>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <Endpoint_ConfigureEndpointTable+0xb6>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	08 95       	ret

00000d92 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d92:	80 91 aa 01 	lds	r24, 0x01AA
     d96:	88 23       	and	r24, r24
     d98:	b4 f4       	brge	.+44     	; 0xdc6 <Endpoint_ClearStatusStage+0x34>
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <Endpoint_ClearStatusStage+0x14>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d9c:	80 91 a9 01 	lds	r24, 0x01A9
     da0:	81 11       	cpse	r24, r1
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <Endpoint_ClearStatusStage+0x18>
     da4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     da6:	e8 ee       	ldi	r30, 0xE8	; 232
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     dac:	82 ff       	sbrs	r24, 2
     dae:	f6 cf       	rjmp	.-20     	; 0xd9c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     db0:	e8 ee       	ldi	r30, 0xE8	; 232
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8b 77       	andi	r24, 0x7B	; 123
     db8:	80 83       	st	Z, r24
     dba:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dbc:	80 91 a9 01 	lds	r24, 0x01A9
     dc0:	81 11       	cpse	r24, r1
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <Endpoint_ClearStatusStage+0x38>
     dc4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dc6:	e8 ee       	ldi	r30, 0xE8	; 232
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     dcc:	80 ff       	sbrs	r24, 0
     dce:	f6 cf       	rjmp	.-20     	; 0xdbc <Endpoint_ClearStatusStage+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dd0:	e8 ee       	ldi	r30, 0xE8	; 232
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8e 77       	andi	r24, 0x7E	; 126
     dd8:	80 83       	st	Z, r24
     dda:	08 95       	ret

00000ddc <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     de4:	20 91 e4 00 	lds	r18, 0x00E4
     de8:	30 91 e5 00 	lds	r19, 0x00E5
     dec:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dee:	ac ee       	ldi	r26, 0xEC	; 236
     df0:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     df2:	e8 ee       	ldi	r30, 0xE8	; 232
     df4:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     df6:	0b ee       	ldi	r16, 0xEB	; 235
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	44 ee       	ldi	r20, 0xE4	; 228
     dfc:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dfe:	8c 91       	ld	r24, X
     e00:	80 fd       	sbrc	r24, 0
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <Endpoint_WaitUntilReady+0x68>
     e04:	23 c0       	rjmp	.+70     	; 0xe4c <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e06:	80 91 a9 01 	lds	r24, 0x01A9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e0a:	88 23       	and	r24, r24
     e0c:	89 f0       	breq	.+34     	; 0xe30 <Endpoint_WaitUntilReady+0x54>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	89 f0       	breq	.+34     	; 0xe34 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e12:	e8 01       	movw	r28, r16
     e14:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e16:	85 fd       	sbrc	r24, 5
     e18:	0f c0       	rjmp	.+30     	; 0xe38 <Endpoint_WaitUntilReady+0x5c>
     e1a:	ea 01       	movw	r28, r20
     e1c:	88 81       	ld	r24, Y
     e1e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e20:	28 17       	cp	r18, r24
     e22:	39 07       	cpc	r19, r25
     e24:	61 f3       	breq	.-40     	; 0xdfe <Endpoint_WaitUntilReady+0x22>
     e26:	61 50       	subi	r22, 0x01	; 1
     e28:	9c 01       	movw	r18, r24
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e2a:	49 f7       	brne	.-46     	; 0xdfe <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_Timeout;
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	12 c0       	rjmp	.+36     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	10 c0       	rjmp	.+32     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e44:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     e46:	80 ff       	sbrs	r24, 0
     e48:	de cf       	rjmp	.-68     	; 0xe06 <Endpoint_WaitUntilReady+0x2a>
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e4c:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e4e:	82 ff       	sbrs	r24, 2
     e50:	da cf       	rjmp	.-76     	; 0xe06 <Endpoint_WaitUntilReady+0x2a>
     e52:	f6 cf       	rjmp	.-20     	; 0xe40 <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e5e:	3b d0       	rcall	.+118    	; 0xed6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e60:	3d d0       	rcall	.+122    	; 0xedc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e62:	e8 ed       	ldi	r30, 0xD8	; 216
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e72:	80 81       	ld	r24, Z
     e74:	8f 7d       	andi	r24, 0xDF	; 223
     e76:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e80:	09 b4       	in	r0, 0x29	; 41
     e82:	00 fe       	sbrs	r0, 0
     e84:	fd cf       	rjmp	.-6      	; 0xe80 <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e86:	10 92 a9 01 	sts	0x01A9, r1
	USB_Device_ConfigurationNumber  = 0;
     e8a:	10 92 a5 01 	sts	0x01A5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e8e:	10 92 a7 01 	sts	0x01A7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     e92:	10 92 a6 01 	sts	0x01A6, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e96:	42 e0       	ldi	r20, 0x02	; 2
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	af de       	rcall	.-674    	; 0xbfc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e9e:	e1 ee       	ldi	r30, 0xE1	; 225
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8e 7f       	andi	r24, 0xFE	; 254
     ea6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ea8:	e2 ee       	ldi	r30, 0xE2	; 226
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     eb2:	80 81       	ld	r24, Z
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     eb8:	e0 ee       	ldi	r30, 0xE0	; 224
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8e 7f       	andi	r24, 0xFE	; 254
     ec0:	80 83       	st	Z, r24
     ec2:	08 95       	ret

00000ec4 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     ec4:	e3 e6       	ldi	r30, 0x63	; 99
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8e 7f       	andi	r24, 0xFE	; 254
     ecc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 a8 01 	sts	0x01A8, r24

	USB_ResetInterface();
     ed4:	c4 cf       	rjmp	.-120    	; 0xe5e <USB_ResetInterface>

00000ed6 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ed6:	10 92 e2 00 	sts	0x00E2, r1
     eda:	08 95       	ret

00000edc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     edc:	10 92 e1 00 	sts	0x00E1, r1
     ee0:	08 95       	ret

00000ee2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f04:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f08:	82 ff       	sbrs	r24, 2
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f0c:	80 91 e2 00 	lds	r24, 0x00E2
     f10:	82 ff       	sbrs	r24, 2
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f14:	e1 ee       	ldi	r30, 0xE1	; 225
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f1e:	c8 d9       	rcall	.-3184   	; 0x2b0 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f20:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f24:	80 ff       	sbrs	r24, 0
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <__vector_11+0x70>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f28:	80 91 e2 00 	lds	r24, 0x00E2
     f2c:	80 ff       	sbrs	r24, 0
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <__vector_11+0x70>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f30:	e2 ee       	ldi	r30, 0xE2	; 226
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f3a:	80 81       	ld	r24, Z
     f3c:	80 61       	ori	r24, 0x10	; 16
     f3e:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f40:	e8 ed       	ldi	r30, 0xD8	; 216
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f4a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     f4c:	10 92 a9 01 	sts	0x01A9, r1
		EVENT_USB_Device_Disconnect();
     f50:	a2 d9       	rcall	.-3260   	; 0x296 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f52:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f56:	84 ff       	sbrs	r24, 4
     f58:	2f c0       	rjmp	.+94     	; 0xfb8 <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f5a:	80 91 e2 00 	lds	r24, 0x00E2
     f5e:	84 ff       	sbrs	r24, 4
     f60:	2b c0       	rjmp	.+86     	; 0xfb8 <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f6a:	09 b4       	in	r0, 0x29	; 41
     f6c:	00 fe       	sbrs	r0, 0
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f70:	e8 ed       	ldi	r30, 0xD8	; 216
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f7a:	e1 ee       	ldi	r30, 0xE1	; 225
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 7e       	andi	r24, 0xEF	; 239
     f82:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f84:	e2 ee       	ldi	r30, 0xE2	; 226
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7e       	andi	r24, 0xEF	; 239
     f8c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f94:	80 91 a5 01 	lds	r24, 0x01A5
     f98:	88 23       	and	r24, r24
     f9a:	21 f0       	breq	.+8      	; 0xfa4 <__vector_11+0xc2>
		  USB_DeviceState = DEVICE_STATE_Configured;
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	80 93 a9 01 	sts	0x01A9, r24
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fa4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     fa8:	88 23       	and	r24, r24
     faa:	14 f4       	brge	.+4      	; 0xfb0 <__vector_11+0xce>
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <__vector_11+0xd0>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 a9 01 	sts	0x01A9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     fb6:	6e d9       	rcall	.-3364   	; 0x294 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fb8:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fbc:	83 ff       	sbrs	r24, 3
     fbe:	1e c0       	rjmp	.+60     	; 0xffc <__vector_11+0x11a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fc0:	80 91 e2 00 	lds	r24, 0x00E2
     fc4:	83 ff       	sbrs	r24, 3
     fc6:	1a c0       	rjmp	.+52     	; 0xffc <__vector_11+0x11a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     fc8:	e1 ee       	ldi	r30, 0xE1	; 225
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	80 93 a9 01 	sts	0x01A9, r24
		USB_Device_ConfigurationNumber = 0;
     fd8:	10 92 a5 01 	sts	0x01A5, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fdc:	80 81       	ld	r24, Z
     fde:	8e 7f       	andi	r24, 0xFE	; 254
     fe0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fe2:	e2 ee       	ldi	r30, 0xE2	; 226
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8e 7f       	andi	r24, 0xFE	; 254
     fea:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fec:	80 81       	ld	r24, Z
     fee:	80 61       	ori	r24, 0x10	; 16
     ff0:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ff2:	42 e0       	ldi	r20, 0x02	; 2
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	01 de       	rcall	.-1022   	; 0xbfc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ffa:	8b d1       	rcall	.+790    	; 0x1312 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	ac 97       	sbiw	r28, 0x2c	; 44
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1036:	ea ea       	ldi	r30, 0xAA	; 170
    1038:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    103a:	a1 ef       	ldi	r26, 0xF1	; 241
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	8c 91       	ld	r24, X

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1040:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	e2 3b       	cpi	r30, 0xB2	; 178
    1046:	f2 07       	cpc	r31, r18
    1048:	d1 f7       	brne	.-12     	; 0x103e <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    104a:	2f d9       	rcall	.-3490   	; 0x2aa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    104c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1050:	83 ff       	sbrs	r24, 3
    1052:	3a c1       	rjmp	.+628    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1054:	90 91 aa 01 	lds	r25, 0x01AA

		switch (USB_ControlRequest.bRequest)
    1058:	80 91 ab 01 	lds	r24, 0x01AB
    105c:	85 30       	cpi	r24, 0x05	; 5
    105e:	09 f4       	brne	.+2      	; 0x1062 <USB_Device_ProcessControlRequest+0x44>
    1060:	81 c0       	rjmp	.+258    	; 0x1164 <USB_Device_ProcessControlRequest+0x146>
    1062:	38 f4       	brcc	.+14     	; 0x1072 <USB_Device_ProcessControlRequest+0x54>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	d1 f1       	breq	.+116    	; 0x10dc <USB_Device_ProcessControlRequest+0xbe>
    1068:	70 f0       	brcs	.+28     	; 0x1086 <USB_Device_ProcessControlRequest+0x68>
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	09 f0       	breq	.+2      	; 0x1070 <USB_Device_ProcessControlRequest+0x52>
    106e:	2c c1       	rjmp	.+600    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
    1070:	35 c0       	rjmp	.+106    	; 0x10dc <USB_Device_ProcessControlRequest+0xbe>
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	09 f4       	brne	.+2      	; 0x1078 <USB_Device_ProcessControlRequest+0x5a>
    1076:	f5 c0       	rjmp	.+490    	; 0x1262 <USB_Device_ProcessControlRequest+0x244>
    1078:	89 30       	cpi	r24, 0x09	; 9
    107a:	09 f4       	brne	.+2      	; 0x107e <USB_Device_ProcessControlRequest+0x60>
    107c:	02 c1       	rjmp	.+516    	; 0x1282 <USB_Device_ProcessControlRequest+0x264>
    107e:	86 30       	cpi	r24, 0x06	; 6
    1080:	09 f0       	breq	.+2      	; 0x1084 <USB_Device_ProcessControlRequest+0x66>
    1082:	22 c1       	rjmp	.+580    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
    1084:	96 c0       	rjmp	.+300    	; 0x11b2 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1086:	90 38       	cpi	r25, 0x80	; 128
    1088:	21 f0       	breq	.+8      	; 0x1092 <USB_Device_ProcessControlRequest+0x74>
    108a:	92 38       	cpi	r25, 0x82	; 130
    108c:	09 f0       	breq	.+2      	; 0x1090 <USB_Device_ProcessControlRequest+0x72>
    108e:	1c c1       	rjmp	.+568    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1092:	80 91 a6 01 	lds	r24, 0x01A6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1096:	90 91 a7 01 	lds	r25, 0x01A7
    109a:	99 23       	and	r25, r25
    109c:	89 f0       	breq	.+34     	; 0x10c0 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10a2:	80 91 ae 01 	lds	r24, 0x01AE
    10a6:	90 91 af 01 	lds	r25, 0x01AF
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ae:	e9 ee       	ldi	r30, 0xE9	; 233
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10b4:	80 91 eb 00 	lds	r24, 0x00EB
    10b8:	85 fb       	bst	r24, 5
    10ba:	88 27       	eor	r24, r24
    10bc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10be:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10c0:	e8 ee       	ldi	r30, 0xE8	; 232
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	90 81       	ld	r25, Z
    10c6:	97 7f       	andi	r25, 0xF7	; 247
    10c8:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10ca:	a1 ef       	ldi	r26, 0xF1	; 241
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    10d0:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10d2:	80 81       	ld	r24, Z
    10d4:	8e 77       	andi	r24, 0x7E	; 126
    10d6:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10d8:	5c de       	rcall	.-840    	; 0xd92 <Endpoint_ClearStatusStage>
    10da:	f6 c0       	rjmp	.+492    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10dc:	99 23       	and	r25, r25
    10de:	09 f4       	brne	.+2      	; 0x10e2 <USB_Device_ProcessControlRequest+0xc4>
    10e0:	02 c1       	rjmp	.+516    	; 0x12e6 <USB_Device_ProcessControlRequest+0x2c8>
    10e2:	92 30       	cpi	r25, 0x02	; 2
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <USB_Device_ProcessControlRequest+0xca>
    10e6:	f0 c0       	rjmp	.+480    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
    10e8:	03 c1       	rjmp	.+518    	; 0x12f0 <USB_Device_ProcessControlRequest+0x2d2>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <USB_Device_ProcessControlRequest+0xd4>
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	90 93 a7 01 	sts	0x01A7, r25
    10f6:	2d c0       	rjmp	.+90     	; 0x1152 <USB_Device_ProcessControlRequest+0x134>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10f8:	80 91 ae 01 	lds	r24, 0x01AE
    10fc:	90 91 af 01 	lds	r25, 0x01AF
    1100:	8f 70       	andi	r24, 0x0F	; 15
    1102:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <USB_Device_ProcessControlRequest+0xec>
    1108:	df c0       	rjmp	.+446    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    110a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    110e:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1112:	20 ff       	sbrs	r18, 0
    1114:	1e c0       	rjmp	.+60     	; 0x1152 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1116:	20 91 ab 01 	lds	r18, 0x01AB
    111a:	23 30       	cpi	r18, 0x03	; 3
    111c:	31 f4       	brne	.+12     	; 0x112a <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    111e:	eb ee       	ldi	r30, 0xEB	; 235
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 62       	ori	r24, 0x20	; 32
    1126:	80 83       	st	Z, r24
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    112a:	eb ee       	ldi	r30, 0xEB	; 235
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	90 81       	ld	r25, Z
    1130:	90 61       	ori	r25, 0x10	; 16
    1132:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <USB_Device_ProcessControlRequest+0x122>
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <USB_Device_ProcessControlRequest+0x11e>
    1144:	aa ee       	ldi	r26, 0xEA	; 234
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	4c 93       	st	X, r20
				UERST = 0;
    114a:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1152:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1156:	e8 ee       	ldi	r30, 0xE8	; 232
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1160:	18 de       	rcall	.-976    	; 0xd92 <Endpoint_ClearStatusStage>
    1162:	b2 c0       	rjmp	.+356    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1164:	91 11       	cpse	r25, r1
    1166:	b0 c0       	rjmp	.+352    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1168:	80 91 ac 01 	lds	r24, 0x01AC
    116c:	90 91 ad 01 	lds	r25, 0x01AD
    1170:	8f 77       	andi	r24, 0x7F	; 127
    1172:	99 27       	eor	r25, r25
    1174:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1176:	e3 ee       	ldi	r30, 0xE3	; 227
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	90 81       	ld	r25, Z
    117c:	90 78       	andi	r25, 0x80	; 128
    117e:	89 2b       	or	r24, r25
    1180:	80 83       	st	Z, r24
    1182:	e8 ee       	ldi	r30, 0xE8	; 232
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	87 7f       	andi	r24, 0xF7	; 247
    118a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    118c:	02 de       	rcall	.-1020   	; 0xd92 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    118e:	e8 ee       	ldi	r30, 0xE8	; 232
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1194:	80 ff       	sbrs	r24, 0
    1196:	fd cf       	rjmp	.-6      	; 0x1192 <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1198:	e3 ee       	ldi	r30, 0xE3	; 227
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    11a2:	11 23       	and	r17, r17
    11a4:	11 f0       	breq	.+4      	; 0x11aa <USB_Device_ProcessControlRequest+0x18c>
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <USB_Device_ProcessControlRequest+0x18e>
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	80 93 a9 01 	sts	0x01A9, r24
    11b0:	8b c0       	rjmp	.+278    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11b2:	90 58       	subi	r25, 0x80	; 128
    11b4:	92 30       	cpi	r25, 0x02	; 2
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <USB_Device_ProcessControlRequest+0x19c>
    11b8:	87 c0       	rjmp	.+270    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11ba:	80 91 ac 01 	lds	r24, 0x01AC
    11be:	90 91 ad 01 	lds	r25, 0x01AD
    11c2:	8c 3d       	cpi	r24, 0xDC	; 220
    11c4:	53 e0       	ldi	r21, 0x03	; 3
    11c6:	95 07       	cpc	r25, r21
    11c8:	99 f5       	brne	.+102    	; 0x1230 <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11ce:	8a e2       	ldi	r24, 0x2A	; 42
    11d0:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11d2:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11d4:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    11d6:	de 01       	movw	r26, r28
    11d8:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11da:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    11dc:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11de:	41 e2       	ldi	r20, 0x21	; 33
    11e0:	e3 2f       	mov	r30, r19
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	40 93 57 00 	sts	0x0057, r20
    11e8:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    11ea:	20 ff       	sbrs	r18, 0
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
    11ee:	82 95       	swap	r24
    11f0:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    11f2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11f4:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11f6:	8a 30       	cpi	r24, 0x0A	; 10
    11f8:	18 f0       	brcs	.+6      	; 0x1200 <USB_Device_ProcessControlRequest+0x1e2>
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	c7 96       	adiw	r24, 0x37	; 55
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <USB_Device_ProcessControlRequest+0x1e6>
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	c0 96       	adiw	r24, 0x30	; 48
    1204:	8d 93       	st	X+, r24
    1206:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	24 31       	cpi	r18, 0x14	; 20
    120c:	49 f7       	brne	.-46     	; 0x11e0 <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    120e:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1210:	08 ee       	ldi	r16, 0xE8	; 232
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	f8 01       	movw	r30, r16
    1216:	80 81       	ld	r24, Z
    1218:	87 7f       	andi	r24, 0xF7	; 247
    121a:	80 83       	st	Z, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    121c:	6a e2       	ldi	r22, 0x2A	; 42
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	97 db       	rcall	.-2258   	; 0x954 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1226:	f8 01       	movw	r30, r16
    1228:	80 81       	ld	r24, Z
    122a:	8b 77       	andi	r24, 0x7B	; 123
    122c:	80 83       	st	Z, r24
    122e:	4c c0       	rjmp	.+152    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1230:	ae 01       	movw	r20, r28
    1232:	45 5d       	subi	r20, 0xD5	; 213
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	60 91 ae 01 	lds	r22, 0x01AE
    123a:	0e 94 ac 00 	call	0x158	; 0x158 <CALLBACK_USB_GetDescriptor>
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	09 f4       	brne	.+2      	; 0x1244 <USB_Device_ProcessControlRequest+0x226>
    1242:	42 c0       	rjmp	.+132    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1244:	08 ee       	ldi	r16, 0xE8	; 232
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	f8 01       	movw	r30, r16
    124a:	20 81       	ld	r18, Z
    124c:	27 7f       	andi	r18, 0xF7	; 247
    124e:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1250:	bc 01       	movw	r22, r24
    1252:	8b a5       	ldd	r24, Y+43	; 0x2b
    1254:	9c a5       	ldd	r25, Y+44	; 0x2c
    1256:	5b dc       	rcall	.-1866   	; 0xb0e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1258:	f8 01       	movw	r30, r16
    125a:	80 81       	ld	r24, Z
    125c:	8b 77       	andi	r24, 0x7B	; 123
    125e:	80 83       	st	Z, r24
    1260:	33 c0       	rjmp	.+102    	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1262:	90 38       	cpi	r25, 0x80	; 128
    1264:	89 f5       	brne	.+98     	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1266:	e8 ee       	ldi	r30, 0xE8	; 232
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	87 7f       	andi	r24, 0xF7	; 247
    126e:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1270:	80 91 a5 01 	lds	r24, 0x01A5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1274:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1278:	80 81       	ld	r24, Z
    127a:	8e 77       	andi	r24, 0x7E	; 126
    127c:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    127e:	89 dd       	rcall	.-1262   	; 0xd92 <Endpoint_ClearStatusStage>
    1280:	23 c0       	rjmp	.+70     	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1282:	91 11       	cpse	r25, r1
    1284:	21 c0       	rjmp	.+66     	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1286:	80 91 ac 01 	lds	r24, 0x01AC
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	e8 f4       	brcc	.+58     	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    128e:	e8 ee       	ldi	r30, 0xE8	; 232
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1298:	80 91 ac 01 	lds	r24, 0x01AC
    129c:	80 93 a5 01 	sts	0x01A5, r24

	Endpoint_ClearStatusStage();
    12a0:	78 dd       	rcall	.-1296   	; 0xd92 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    12a2:	80 91 a5 01 	lds	r24, 0x01A5
    12a6:	88 23       	and	r24, r24
    12a8:	21 f0       	breq	.+8      	; 0x12b2 <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	80 93 a9 01 	sts	0x01A9, r24
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12b2:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    12b6:	88 23       	and	r24, r24
    12b8:	14 f4       	brge	.+4      	; 0x12be <USB_Device_ProcessControlRequest+0x2a0>
    12ba:	84 e0       	ldi	r24, 0x04	; 4
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <USB_Device_ProcessControlRequest+0x2a2>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 a9 01 	sts	0x01A9, r24

	EVENT_USB_Device_ConfigurationChanged();
    12c4:	0e 94 4c 01 	call	0x298	; 0x298 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12c8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12cc:	83 ff       	sbrs	r24, 3
    12ce:	16 c0       	rjmp	.+44     	; 0x12fc <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12d0:	e8 ee       	ldi	r30, 0xE8	; 232
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	87 7f       	andi	r24, 0xF7	; 247
    12d8:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12da:	eb ee       	ldi	r30, 0xEB	; 235
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 62       	ori	r24, 0x20	; 32
    12e2:	80 83       	st	Z, r24
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <USB_Device_ProcessControlRequest+0x2de>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    12e6:	90 91 ac 01 	lds	r25, 0x01AC
    12ea:	91 30       	cpi	r25, 0x01	; 1
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <USB_Device_ProcessControlRequest+0x2aa>
    12ee:	fd ce       	rjmp	.-518    	; 0x10ea <USB_Device_ProcessControlRequest+0xcc>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    12f0:	80 91 ac 01 	lds	r24, 0x01AC
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <USB_Device_ProcessControlRequest+0x2dc>
    12f8:	ff ce       	rjmp	.-514    	; 0x10f8 <USB_Device_ProcessControlRequest+0xda>
    12fa:	2b cf       	rjmp	.-426    	; 0x1152 <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    12fc:	ac 96       	adiw	r28, 0x2c	; 44
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1312:	08 95       	ret

00001314 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1314:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1316:	80 91 a9 01 	lds	r24, 0x01A9
    131a:	88 23       	and	r24, r24
    131c:	a1 f0       	breq	.+40     	; 0x1346 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    131e:	c0 91 e9 00 	lds	r28, 0x00E9
    1322:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1324:	80 91 ec 00 	lds	r24, 0x00EC
    1328:	80 ff       	sbrs	r24, 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <USB_USBTask+0x1c>
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <USB_USBTask+0x1e>
    1330:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1332:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1334:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1338:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    133c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    133e:	6f de       	rcall	.-802    	; 0x101e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1340:	cf 70       	andi	r28, 0x0F	; 15
    1342:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <memcmp>:
    134a:	fb 01       	movw	r30, r22
    134c:	dc 01       	movw	r26, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <memcmp+0xe>
    1350:	8d 91       	ld	r24, X+
    1352:	01 90       	ld	r0, Z+
    1354:	80 19       	sub	r24, r0
    1356:	21 f4       	brne	.+8      	; 0x1360 <memcmp+0x16>
    1358:	41 50       	subi	r20, 0x01	; 1
    135a:	50 40       	sbci	r21, 0x00	; 0
    135c:	c8 f7       	brcc	.-14     	; 0x1350 <memcmp+0x6>
    135e:	88 1b       	sub	r24, r24
    1360:	99 0b       	sbc	r25, r25
    1362:	08 95       	ret

00001364 <memcpy>:
    1364:	fb 01       	movw	r30, r22
    1366:	dc 01       	movw	r26, r24
    1368:	02 c0       	rjmp	.+4      	; 0x136e <memcpy+0xa>
    136a:	01 90       	ld	r0, Z+
    136c:	0d 92       	st	X+, r0
    136e:	41 50       	subi	r20, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	d8 f7       	brcc	.-10     	; 0x136a <memcpy+0x6>
    1374:	08 95       	ret

00001376 <memset>:
    1376:	dc 01       	movw	r26, r24
    1378:	01 c0       	rjmp	.+2      	; 0x137c <memset+0x6>
    137a:	6d 93       	st	X+, r22
    137c:	41 50       	subi	r20, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	e0 f7       	brcc	.-8      	; 0x137a <memset+0x4>
    1382:	08 95       	ret

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
