/*
 * Sensor_Data_Buffer.h
 *
 *  Created on: Jul 13, 2013
 *      Author: francispapineau
 */

#ifndef SENSOR_DATA_BUFFER_H_
#define SENSOR_DATA_BUFFER_H_

/**
 * This Class Implements the ring buffer that will be used
 * to queue up the incoming packets from the sensor nodes.
 * This is only instantialized when the USB HID Host choice
 * is chosen. This library was taken from the mosquito project
 * on GOOGLE CODE as an open source library.
 */

#include <Arduino.h>

#define DEFAULTBUFSIZE 32
class SENSOR_DATA_BUFFER{

public:
	SENSOR_DATA_BUFFER() {
		init();
	};

	SENSOR_DATA_BUFFER(unsigned int buf_size) {
		init(buf_size);
	};

	// This method initializes the datastore of the buffer to a certain size.
	void init(unsigned int buf_size);

	// This method initializes the datastore of the buffer to the default size.
	void init();

	// This method resets the buffer into an original state (with no data)
	void clear();

	// This method resets the fillError variable to false.
	void resetError();

	// This method tells you if your buffer overflowed at some time since the last
	// check.  The error state will be reset to false.
	boolean checkError();

	// This releases resources for this buffer, after this has been called the buffer should NOT be used
	void deAllocate();

	// Returns how much space is used in the buffer
	int getSize();

	// Returns the maximum capacity of the buffer
	int getCapacity();

	// This method returns the byte that is located at index in the buffer but doesn't modify the buffer like the get methods (doesn't remove the retured byte from the buffer)
	byte peek(unsigned int index);

	//
	// Put methods, either a regular put in back or put in front
	//
	uint8_t putInFront(byte in);
	uint8_t put(byte in);
	uint8_t putString(char *in);

	int putIntInFront(int in);
	int putInt(int in);

	int putLongInFront(long in);
	int putLong(long in);

	int putFloatInFront(float in);
	int putFloat(float in);

	//
	// Get methods, either a regular get from front or from back
	//
	byte get();
	byte getFromBack();

	int getInt();
	int getIntFromBack();

	long getLong();
	long getLongFromBack();

	float getFloat();
	float getFloatFromBack();

private:
	byte* data;

	volatile unsigned int capacity;
	volatile unsigned int position;
	volatile unsigned int length;
	volatile boolean fillError;
};
#endif /* SENSOR_DATA_BUFFER_H_ */
