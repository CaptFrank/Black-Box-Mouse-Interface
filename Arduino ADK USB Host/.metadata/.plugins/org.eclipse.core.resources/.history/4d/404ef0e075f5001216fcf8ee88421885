/*
 * Sensor_PACKET_PARSER.c
 *
 *  Created on: Jul 13, 2013
 *      Author: francispapineau
 */

#include "../System_Defines/Main_Defines.h"
#include "Packet_Parser.h"

//
//		byte packet_type;
//
//		struct router_ack_t						_ack;
//		struct router_heartbeat_t 				_heartbeat;
//		struct router_status_info_t 			_status;
//		struct router_debug_status_t 			_debug;
//		struct router_nmap_info_t 				_nmap;
//		struct router_sensor_enable_report_t 	_en_sensors;
//		struct remote_sensor_configuration_t 	_configs;
//		struct remote_sensor_data_t 			_data;
//		struct remote_radio_values_t			_radio_configs;
//
//		void _check_memory_space();
//		bool _check_packet_integrity(byte* packet);
//		void _parse_packet(byte* packet);
//		void _parse(byte packet_id, byte packet_ver, void *buf);
//
//	public :
//
//		PACKET_PARSER();
//
//		static void	parse(void *arg, byte packet_id, byte packet_ver, void *buf);

static void PACKET_PARSER::parse(void *arg, byte packet_id, byte packet_ver, void *buf){

	//! Check if there is space left
	_check_memory_space();

	//! Check if the string is ok to process.
	_check_packet_integrity((String*) buf);

	//! Process String
	((PACKET_PARSER*)arg)->_parse(packet_id, packet_ver, buf);
}

void PACKET_PARSER::_check_memory_space(){

    //! Check memory integrity
    if(memory_check() <= EMPTY)
    	reset_device();
}

bool PACKET_PARSER::_check_packet_integrity(String* packet){

	//! Checks length, Header, Tail
	if(packet->len > EMPTY)
		if(packet[2] > EMPTY)
			if(packet[0] == '+')
				if(packet[packet->len - 1] == '*')
					return true;

	return false;
}

void PACKET_PARSER::_parse(byte packet_id, byte packet_ver, void *buf){

	buf = String* buf;

	//! Grabs the header structure from the String.
	String header = buf->substring(1, 13);

	void    *dst;
	size_t  len;

	        switch (messageID) {
	        case MSG_HEARTBEAT:
	                dst = &_heartbeat;
	                len = sizeof(_heartbeat);
	                _availability[0] |= AVAIL_HEARTBEAT;
	                break;

	        case MSG_ATTITUDE:
	                dst = &_attitude;
	                len = sizeof(_attitude);
	                _availability[0] |= AVAIL_ATTITUDE;
	                break;

	        case MSG_LOCATION:
	                dst = &_location;
	                len = sizeof(_location);
	                _availability[0] |= AVAIL_LOCATION;
	                break;

	        case MSG_PRESSURE:
	                dst = &_pressure;
	                len = sizeof(_pressure);
	                _availability[0] |= AVAIL_PRESSURE;
	                break;

	        default:
	                dst = NULL;
	        }
	        if (NULL != dst)
	                memcpy(dst, buf, len);



}
