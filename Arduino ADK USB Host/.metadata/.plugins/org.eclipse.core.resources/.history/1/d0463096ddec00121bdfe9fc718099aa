/*
 * Debug_LED_Function.h
 *
 *  Created on: Jul 13, 2013
 *      Author: francispapineau
 */

#ifndef DEBUG_LED_FUNCTION_H_
#define DEBUG_LED_FUNCTION_H_

#include "../System_Defines/Main_Defines.h"

static struct DEBUG_CODES_STRUCT {

		byte ERROR_INDEX[9]{

			1,	// FATAL ERROR
			2,	// STATE CHANGE
			3,	// WARNING ERROR
			4,	// INFO ERROR
			5,	// DEBUG INFO
			6,	// MEMORY ERROR
			7,	// DEBUG ERROR
			8, 	// REBOOT ERRORS
			9 	// CLEAR ERRORS
		};

		String DEBUG_STRINGS[9]{

				"FATAL ERROR",
				"WARNING ERROR",
				"INFO ERROR",
				"DEBUG INFO",
				"MEMORY ERROR",
				"REBOOT ERROR",
				"DEBUG ERROR",
				"STATE CHANGE"
		};

		byte DEBUG_CODES[9]{

				0b0000001,	// FATAL ERROR
				0b0000010,	// STATE CHANGE
				0b0000100,	// WARNING ERROR
				0b0001000,	// INFO ERROR
				0b0010000,	// DEBUG INFO
				0b0100000,	// MEMORY ERROR
				0b1000000,	// DEBUG ERROR
				0b1111111, 	// REBOOT ERRORS
				0b0000000 	// CLEAR ERRORS
		};

		byte DEBUG_LED_CODES[9]{

				0b0000,		// CLEAR ERRORS
				0b0001,		// FATAL ERROR
				0b0010,		// WARNING ERROR
				0b0100,		// INFO ERROR
				0b1000,		// DEBUG INFO
				0b0011,		// MEMORY ERROR
				0b0101,		// DEBUG ERROR
				0b1111		// REBOOT ERROR
		};
	};

/**
 * This class is implemented to handle debug commands and
 * states to then output the LED states and show a debug
 * code.
 */
class DEBUG_API {

	private:

		String* debug_type;
		byte* debug_code;
		byte* led_debug_code;

		void set_error_type(String error_type);
		void set_led_error_code(byte error_code);
		void set_error_code(byte error_code);
		void reboot_cause_fatal_error();
		void reboot_cause_threshold_exeeded();

	public:

		void print_error(String error_type, byte error_code, byte error_code);
		void enable_debug();
		void disable_debug();

		byte get_number_of(String debug_type);
		void set_threshold(byte threshold);
		void check();
};


#endif /* DEBUG_LED_FUNCTION_H_ */
