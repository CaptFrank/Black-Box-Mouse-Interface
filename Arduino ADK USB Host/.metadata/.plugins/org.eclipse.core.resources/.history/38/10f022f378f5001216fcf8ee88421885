#include <Arduino.h>
#include "../System_Defines/Main_Defines.h"

void setup();
void loop();
void init();

/**
 * This function configures the device with NVRAM stored
 * parameters.
 * @param nvram_object - NVRAM
 */
void configure_device(NVRAM* nvram_object){

	SERIAL.begin(nvram_object->nv.serial1_speed);
	RF_SERIAL.begin(nvram_object->nv.serial2_speed);
	DEBUG_SERIAL.begin(nvram_object->nv.serial3_speed);

	//! Buttons setup
	pinMode(nvram_object->nv.button_1,
				 nvram_object->nv.button1_setting);
	pinMode(nvram_object->nv.button_2,
				 nvram_object->nv.button2_setting);

	//! LED setup
	pinMode(nvram_object->nv.led_1,
				 nvram_object->nv.led1_setting);
	pinMode(nvram_object->nv.led_2,
				 nvram_object->nv.led2_setting);
	pinMode(nvram_object->nv.led_3,
				 nvram_object->nv.led3_setting);
	pinMode(nvram_object->nv.led_4,
				 nvram_object->nv.led4_setting);

	//! Set RF data.
	base_station_address = nvram_object->nv.node_address;
	base_station_mode = nvram_object->nv.device_mode;
}

/**
 * This is the main function that does the work
 * on the uC. It returns 0 if successfully terminated,
 * and 1 is there is an error.
 * @return
 */
int main(void){
	init();
	setup();

	for (;;) {
		loop();
	}
	return 0;
}

void setup(){

	//! Clear the interrupt flag, to void all interrupts
	//! coming in during the setup phase
	cli();

	// Start Debug Engine.

	// Check LEDs

	//! Reset and reboot device.
	attachInterrupt(SELECT_BUTTON_2, reset_device, CHANGE);

	//! Wait 5sec to check the pin.
	delay(FIVE_SECONDS);

	//! Check choice (default = Emulation).
		//! 1 - Emulation
		//! 0 - Real USB device
	if(digitalRead(SELECT_BUTTON_1) == HIGH){

		//! Defines the generic pointer (EMULATION).
		//! This is where we setup the object pointer.
		EMULATION_DEVICE emulation_device;
		generic_pointer = &emulation_device;
		emulation_chosen = true;

	}else if(digitalRead(SELECT_BUTTON_1) == LOW){

		//define the generic pointer (USB HOST DEVICE).
		//this is where we setup the object pointer.

		USB_DEVICE usb_host_device;
		generic_pointer = &usb_host_device;
		usb_device_chosen = true;

	}else{

		//! If none of the above, reset the device.
		reset_device();
	}

	//! Timer is initialized to keep track of the CPU idle time.
	TCCR1B = _BV(CS12) | _BV(CS11);

	//! Loads the settings saved in NVRAM
	nvram.load();
	configure_device(&nvram);

	//! USB Initialize the buffers and structures pertaining to the
	//! USB device class.
	usbInit();

	//! This allows the USB device to re-enumerate in the PC OS.
    usbDeviceDisconnect();
    delay(250);
    usbDeviceConnect();

    //! Check memory integrity
    if(memory_check() <= EMPTY)
    	reset_device();

	//! Resume interrupt handling
	sei();
}

void loop(){

	//! If the emulation device is chosen.
	//! Start the emulation process.
	if(emulation_chosen){
		//! Cast to the emulation device pointer.
		((EMULATION_DEVICE*) generic_pointer)->emulate_usb();

	}else if(usb_device_chosen){
		//! Cast to the USB device pointer
		((USB_DEVICE*) generic_pointer)->run();

	}else{ //! Something went wrong.
		reset_device();
	}
}
