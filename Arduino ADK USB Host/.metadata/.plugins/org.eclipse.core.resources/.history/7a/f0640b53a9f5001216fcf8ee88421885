/*
 * Command_Interpreter.cpp
 *
 *  Created on: Jul 25, 2013
 *      Author: francispapineau
 */

#include "Command_Interpreter.h"

/**
 * buf. definition: [Target Address][Command Predicate][Arg 1][Arg 2]
 */
//! Sends a command
void COMMAND_INTERPRETER::_send_cmd(byte packet_id, void *buf){

	String* buffer = (String*) buf;

	if(packet_id == USB_DEVICE_CMD){

		//! Construct a command
		_send_command((byte*)buf[0]);
	}
}

//! Execute a command from a sensor or router
void COMMAND_INTERPRETER::_send_command(byte* command){

	switch(command[0]){

		case WAKEUP_ROUTER: 	// Wake up the router
			_wakeup_router();
			break;

		case WAKEUP_SENSOR: 	// Wake up a sensor
			_wakeup_sensor(command);
			break;

		case POWEROFF_ROUTER: 	// Power off router
			_poweroff_router();
			break;

		case POWEROFF_SENSOR: 	// Power off sensor
			_poweroff_sensor(command);
			break;

		case POWERON_ROUTER: 	// Power on router
			_power_on_router();
			break;

		case POWERON_SENSOR: 	// Power on sensor
			_power_on_sensor(command);
			break;

		case PAUSE_ROUTER: 	// Pause router
			_pause_router();
			break;

		case PAUSE_SENSOR: 	// Pause sensor
			_pause_sensor(command);
			break;

		case ROUTER_STATUS: 	// Router status
			_request_router_status();
			break;

		case REQUEST_NMAP: 	// Request NMAP
			_request_nmap();
			break;

		case REQUEST_SENSOR_CHANNEL:	// Request sensor channel info
			_request_sensor_channel(command);
			break;

		case REQUEST_SENSOR_ENABLE: 	// Request sensor enable
			_request_sensor_enable();
			break;

		case REQUEST_SENSOR_CONFIG:	// Request sensor config
			_request_sensor_config();
			break;

		case REQUEST_SENSOR_STATE: 	// Request sensor state
			_request_sensor_state(command);
			break;

		case REQUEST_ROUTER_RUN: 	// Request router run
			_request_router_run();
			break;

		case PING_ROUTER: 	// Ping Router
			_ping_router();
			break;

		case PING_SENSOR: 	// Ping sensor
			_ping_sensor(command);
			break;

		default:	// Other commands don't exist
			break;
	}
}

//! The public send command method
void COMMAND_INTERPRETER::send_cmd(void *buf){

	//! Process String
	_send_cmd(buf);
}

//! Ping router
void COMMAND_INTERPRETER::_ping_router(){

	_send_cmd()
}

void COMMAND_INTERPRETER::_ping_sensor(byte* sensor_address){

}

void COMMAND_INTERPRETER::_request_router_run(){

}

void COMMAND_INTERPRETER::_request_sensor_state(byte* command){

}

void COMMAND_INTERPRETER::_request_sensor_config(){

}

void COMMAND_INTERPRETER::_request_sensor_enable(){

}

void COMMAND_INTERPRETER::_request_sensor_channel(byte* command){

}

void COMMAND_INTERPRETER::_request_nmap(){

}

void COMMAND_INTERPRETER::_request_router_status(){

}

void COMMAND_INTERPRETER::_pause_sensor(byte* command){

}

void COMMAND_INTERPRETER::_pause_router(){

}

void COMMAND_INTERPRETER::_power_on_router(){

}

void COMMAND_INTERPRETER::_power_on_sensor(byte* command){

}

void COMMAND_INTERPRETER::_poweroff_router(){

}

void COMMAND_INTERPRETER::_poweroff_sensor(byte* command){

}

void COMMAND_INTERPRETER::_wakeup_router(){

}

void COMMAND_INTERPRETER::_wakeup_sensor(byte* command){

}

