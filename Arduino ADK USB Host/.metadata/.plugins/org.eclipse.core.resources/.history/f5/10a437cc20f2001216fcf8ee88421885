/*
 * USB_Device_Implementation.h
 *
 *  Created on: Jul 17, 2013
 *      Author: francispapineau
 */

#ifndef USB_DEVICE_IMPLEMENTATION_H_
#define USB_DEVICE_IMPLEMENTATION_H_

	/*		// flow:
			// GND_STATION (request) -----------------------> ROUTER (Acknowledge)
			//                       <-----------------------
			// Poll for results		 <----------------------- Results are sent (with id)
			// Send stanby command   -----------------------> Standby (Poll for run)
		/->	// Send run command 	 -----------------------> Run
		|-	// Receive data structs  <-----------------------
	*/

typedef struct packet_structure_info_t {

	byte message_size;
	byte packet_id;
	byte sensor_id;
	byte time_stamp;
	byte run_time;
	byte crc_checksum;

};

typedef struct router_status_info_t {

	// general status
	byte system_status;
	byte error_count;
	byte debug_enable_flag;
	String power_state;
	String machine_state;
	byte battey_level;

	// wireless debug
	byte acks_sent_counter;
	byte sent_request_counter;
	byte packet_counter;
	byte rx_count;
	byte tx_count;

	// device info
	byte address;
	String mode;
	byte router_address;
	String router_id;
};

typedef struct router_nmap_info_t {

	// remote sensor information
	byte size;
	byte (*allocate_memory_pool)(byte* size);
};

typedef struct router_ack_info_t {

};

typedef struct router_sensor_enable_report_t {

};

typedef struct error_message_t {

};

typedef struct remote_sensor_configuration_t {

};

typedef struct remote_sensor_data_t {

};

union packet_structure {

	packet_structure_info_t packet_structure_info;
	router_status_info_t router_status_info;
	router_nmap_info_t router_nmap_info;
	router_ack_info_t router_ack_info;
	router_sensor_enable_report_t router_sensor_enable_report;
	error_message_t error_message;
	remote_sensor_configuration_t remote_sensor_configuration;
	remote_sensor_data_t remote_sensor_data;

};

/**
 * This is a memory allocation function for the packet receiver.
 * @param byte - size
 */
void allocate_memory_pool(byte* size){

	malloc(size);

}

class USB_DEVICE {

	private:

	public:

	void send_id_request(byte sensor_address);
	void poll_for_results();
	void send_standby_command(byte sensor_address);
	void send_run_command(byte sensor_address);
	byte get_number_of_packets();
	byte receive_packet();

	String get_sensor_map();
	String get_sensor_info();
	String get_network_topology();

};


#endif /* USB_DEVICE_IMPLEMENTATION_H_ */
