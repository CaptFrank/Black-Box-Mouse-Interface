/*
 * Sensor_Parser.h
 *
 *  Created on: Jul 13, 2013
 *      Author: francispapineau
 */

#ifndef SENSOR_PARSER_H_
#define SENSOR_PARSER_H_

#include "../System_Defines/Main_Defines.h"

#define PACKET_INFO 	0
#define ROUTER_STATUS 	1
#define ROUTER_NMAP		2
#define ROUTER_ACK		3
#define SENSOR_EN		4
#define ERROR_MSG		5
#define SENSOR_CONFIG	6
#define SENSOR_DATA		7

#define MAX_TOKENS		40

/**
 * The generic time info for an incoming packet.
 */
struct packet_structure_info_t {

	char* message_size; 		//! The mesage size
	char* packet_id; 			//! The packet id
	char* sensor_id; 			//! The sensor node id
	char* time_stamp; 			//! The timestamp of the rx
	char* run_time;				//! The runtime of the sensor.

};

/**
 * The router status information structure.
 */
struct router_status_info_t {

	//! general status
	char* system_status;		//! The overall system status
	char* error_count;			//! The error count... network errors
	char* debug_enable_flag;	//! If the debug flag is enabled
	String power_state;			//! The power state
	String machine_state;		//! The machine state
	char* battey_level;			//! The battery level

	//! wireless debug
	char* acks_sent_counter;	//! The number of acks sent
	char* sent_request_counter;	//! The sent_request to sensor count
	char* packet_counter;		//! Packet counter
	char* rx_count;				//! The rx counter
	char* tx_count;				//! The tx counter

	//! device info
	char* address;				//! The device address
	String mode;				//! The router mode
	char* router_address;		//! The router address
	String router_id;			//! The router id
};

/**
 * This is the network map structure.
 * It houses all the network critical information
 * to each sensor.
 */
struct router_nmap_info_t {

	//! remote sensor information
	char* number_sensors;		//! The number of sensors in the network

	//! we need to make this for each sensor
	//! this is a linked list for each sensor
	struct data {
		char* sensor_id;		//! The sensor id
		char* sensor_address;	//! The sensor address
		char* sensor_speed;		//! The sensor speed (CPU, read)
		char* data_type; 		//! 0 = int, 2 = float, 3 = double
		char* rx_buffer_size;	//! The rx buffer size
		char* battery_charge;	//! The sensor battery charge
		struct data* next;		//! The next node
	};
};

/**
 * The ack message from the router.
 */
struct router_ack_info_t {
	bool ack_message;			//! ack = true
};

/**
 * The router sensor enabled report structure.
 */
struct router_sensor_enable_report_t {

	char* number_sensors;		//! The number of sensors
	byte* sensor_config_enable;	//! Binary number [10000000]
								//! Represents the number of sensors
								//! enabled
};

/**
 * Error message structure
 */
struct error_message_t {

	char* sensor_id;			//! Sensor id
	char* sensor_address;		//! Sensor address
	String error_cause;			//! Error cause from remote
};

/**
 * The configuration structure for each sensor,
 * and for each channel.
 */
struct remote_sensor_configuration_t {

	char* number_sensors;		//! Number of sensors to config

	//! struct -> linked list for each sensor
	struct data {
		char* sensor_id;		//! The sensor id
		String mode;			//! The mode of the sensor
		char* channels;			//! The number of channels

		//! struct -> linked list for each channel
		struct channels_config {
			char* channel_id;	//! Channel id
			char* data_type; 	//! 0 = Analog, 1 = Digital
			struct channels_config* next; //! Next node for channels
		};
	};
	struct remote_sensor_configuration_t* next_config;  //! Next node for sensor
};

/**
 * The remote sensor data structure
 */
struct remote_sensor_data_t {

	char* sensor_id;			//! The sensor id
	String mode;				//! The sensor mode
	char* channels;				//! Number of channels to read

	//! struct -> linked list for each channel to read
	struct channel_data {
		char* channel_id;		//! Channel id
		char* channel_data;		//! Channel data
		struct channel_data* next;	//! Next channel data node.
	};
};

/**
 * A shared memory resource
 */
union packet_structure {

	/**
	 * Define one structure each. This union will
	 * shared the memory context while running.
	 * Watch for overrides.
	 */
	struct packet_structure_info_t packet_structure_info;
	struct router_status_info_t router_status_info;
	struct router_nmap_info_t router_nmap_info;
	struct router_ack_info_t router_ack_info;
	struct router_sensor_enable_report_t router_sensor_enable_report;
	struct error_message_t error_message;
	struct remote_sensor_configuration_t remote_sensor_configuration;
	struct remote_sensor_data_t remote_sensor_data;

}packet; //! Define packet



class PARSER {

	/**
	 * Packet Definition
	 * [HEADER][ID][MESSAGE_LENGTH][JSON_STRING][TAIL]
	 * [+][##][##][{SRINGS}][*]
	 */

	private:

		token_list_t *token_list = NULL;
		byte packet_type;
		String packet_str;

		void parse(token_list_t* token_list, byte packet_type);
		void assign_run_variables();
		void assign_router_status_variables();
		void assign_nmap_variables();
		void assign_ack();
		void assign_error_message();
		void assign_sensor_en();
		void assign_sensor_config();
		void assign_sensor_data();

	public :
		PARSER();

		bool check_packet_integrity(String packet);
		void parse_packet(String packet);
};

#endif /* SENSOR_PARSER_H_ */
