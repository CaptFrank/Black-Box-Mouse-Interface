/*
 * Sensor_Data_Buffer.cpp
 *
 *  Created on: Jul 13, 2013
 *      Author: francispapineau
 */


/**
 * GIVING THE AUTHOR CREDIT...
 *
 * SENSOR_DATA_BUFFER.cpp - A circular buffer implementation for Arduino
 * Created by Sigurdur Orn, July 19, 2010.
 * siggi@mit.edu
 * Updated by GreyGnome (aka Mike Schwager) Thu Feb 23 17:25:14 CST 2012
 * 	added the putString() method and the fillError variable.
 *	added the checkError() and resetError() methods.  The checkError() method resets the fillError variable
 *	to false as a side effect.
 *	added the SENSOR_DATA_BUFFER(unsigned int buf_size) constructor.
 *	added the init() method, and had the constructor call it automagically.
 *	Also made the capacity, position, length, and fillError variables volatile, for safe use by interrupts.
 */

#include "SENSOR_DATA_BUFFER.h"

//! Work Method for setting up the buffer.
void SENSOR_DATA_BUFFER::init(){
	SENSOR_DATA_BUFFER::init(DEFAULTBUFSIZE);
}

//! The other work method for init.
void SENSOR_DATA_BUFFER::init(unsigned int buf_length){
	data = (byte*)malloc(sizeof(byte)*buf_length);
	capacity = buf_length;
	position = 0;
	length = 0;
	fillError=false;
}

void SENSOR_DATA_BUFFER::deAllocate(){
	free(data);
}

void SENSOR_DATA_BUFFER::clear(){
	position = 0;
	length = 0;
}

void SENSOR_DATA_BUFFER::resetError(){
	fillError=false;
}

boolean SENSOR_DATA_BUFFER::checkError(){
	/*
	if (fillError) {
		Serial.print("E: checkError: length ");
		Serial.println(length, DEC);
	}
	*/

	boolean result=fillError;
	fillError=false;
	return(result);
}

int SENSOR_DATA_BUFFER::getSize(){
	return length;
}

int SENSOR_DATA_BUFFER::getCapacity(){
	return capacity;
}

byte SENSOR_DATA_BUFFER::peek(unsigned int index){
	byte b = data[(position+index)%capacity];
	return b;
}

uint8_t SENSOR_DATA_BUFFER::put(byte in){
	if(length < capacity){
		// save data byte at end of buffer
		data[(position+length) % capacity] = in;
		// increment the length
		length++;
		return 1;
	}
	// return failure
	//Serial.print("E: put: ");
	//Serial.println(length, DEC);
	fillError=true;
	return 0;
}


uint8_t SENSOR_DATA_BUFFER::putString(char *in){
	uint8_t count = 0;
	char *inString;

	inString=in;
	cli();
	while(length <= capacity){
		if (length == capacity) {
			fillError=true;
			return count;
		}
		// save data byte at end of buffer
		data[(position+length) % capacity] = *inString;
		// increment the length
		length++;
		inString++;
		count++;
		if (*inString == 0) {
			if (count==0) fillError=true; // Serial.println("E: putString"); };
			return count;
		}
	}
	return 0;
}

uint8_t SENSOR_DATA_BUFFER::putInFront(byte in){
	cli();
	if(length < capacity){
			// save data byte at end of buffer
			if( position == 0 )
					position = capacity-1;
			else
					position = (position-1)%capacity;
			data[position] = in;
			// increment the length
			length++;
			return 1;
	}
	// return failure
	//Serial.println("E: putInFront");
	fillError=true;
	return 0;
}

byte SENSOR_DATA_BUFFER::get(){
	cli();
	byte b = 0;

	if(length > 0){
		b = data[position];
		// move index down and decrement length
		position = (position+1)%capacity;
		length--;
	}

	return b;
}

byte SENSOR_DATA_BUFFER::getFromBack(){
	byte b = 0;
	if(length > 0){
		cli();
		b = data[(position+length-1)%capacity];
		length--;
	}

	return b;
}

/**
 * Integer method members
 */

int SENSOR_DATA_BUFFER::putIntInFront(int in){
    byte *pointer = (byte *)&in;
	putInFront(pointer[0]);
	putInFront(pointer[1]);
}

int SENSOR_DATA_BUFFER::putInt(int in){
    byte *pointer = (byte *)&in;
	put(pointer[1]);
	put(pointer[0]);
}


int SENSOR_DATA_BUFFER::getInt(){
	int ret;
    byte *pointer = (byte *)&ret;
	pointer[1] = get();
	pointer[0] = get();
	return ret;
}

int SENSOR_DATA_BUFFER::getIntFromBack(){
	int ret;
    byte *pointer = (byte *)&ret;
	pointer[0] = getFromBack();
	pointer[1] = getFromBack();
	return ret;
}

/**
 * Long method members.
 */

int SENSOR_DATA_BUFFER::putLongInFront(long in){
    byte *pointer = (byte *)&in;
	putInFront(pointer[0]);
	putInFront(pointer[1]);
	putInFront(pointer[2]);
	putInFront(pointer[3]);
}

int SENSOR_DATA_BUFFER::putLong(long in){
    byte *pointer = (byte *)&in;
	put(pointer[3]);
	put(pointer[2]);
	put(pointer[1]);
	put(pointer[0]);
}


long SENSOR_DATA_BUFFER::getLong(){
	long ret;
    byte *pointer = (byte *)&ret;
	pointer[3] = get();
	pointer[2] = get();
	pointer[1] = get();
	pointer[0] = get();
	return ret;
}

long SENSOR_DATA_BUFFER::getLongFromBack(){
	long ret;
    byte *pointer = (byte *)&ret;
	pointer[0] = getFromBack();
	pointer[1] = getFromBack();
	pointer[2] = getFromBack();
	pointer[3] = getFromBack();
	return ret;
}


/**
 * Float method members.
 */

int SENSOR_DATA_BUFFER::putFloatInFront(float in){
    byte *pointer = (byte *)&in;
	putInFront(pointer[0]);
	putInFront(pointer[1]);
	putInFront(pointer[2]);
	putInFront(pointer[3]);
}

int SENSOR_DATA_BUFFER::putFloat(float in){
    byte *pointer = (byte *)&in;
	put(pointer[3]);
	put(pointer[2]);
	put(pointer[1]);
	put(pointer[0]);
}

float SENSOR_DATA_BUFFER::getFloat(){
	float ret;
    byte *pointer = (byte *)&ret;
	pointer[3] = get();
	pointer[2] = get();
	pointer[1] = get();
	pointer[0] = get();
	return ret;
}

float SENSOR_DATA_BUFFER::getFloatFromBack(){
	float ret;
    byte *pointer = (byte *)&ret;
	pointer[0] = getFromBack();
	pointer[1] = getFromBack();
	pointer[2] = getFromBack();
	pointer[3] = getFromBack();
	return ret;
}




